{
  "paused": false,
  "id": "fIW8T7Z1ct61f",
  "reference": "",
  "author": "Kasra Karami",
  "group": "",
  "icon": "ti ti-users-alt",
  "color": "#A4FB4E",
  "version": "0.0.1",
  "readme": "",
  "url": "https://",
  "name": "Users",
  "components": {
    "ctutod1f6": "<script total>\n\texports.name = 'OAuth 2.0';\n\texports.icon = 'ti ti-key';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'API';\n\texports.config = { urltoken: '', urlauthorize: '', variable: '', clientid: '', clientsecret: '' };\n\n\texports.call = function(data, callback) {\n\n\t\tswitch(data.type) {\n\t\t\tcase 'oauth':\n\t\t\t\tvar opt = {};\n\t\t\t\topt.method = 'POST';\n\t\t\t\topt.url = data.data.url;\n\t\t\t\topt.type = 'json';\n\t\t\t\tdelete data.data.url;\n\t\t\t\topt.body = JSON.stringify(data.data);\n\t\t\t\topt.callback = function(err, response) {\n\t\t\t\t\tvar response = response.body.parseJSON(true);\n\t\t\t\t\tcallback(response);\n\t\t\t\t};\n\t\t\t\tREQUEST(opt);\n\t\t\t\tbreak;\n\t\t}\n\n\t};\n\n\texports.make = function(instance, config) {\n\t\tinstance.configure = function() {\n\t\t\tif (config.variable && config.accesstoken) {\n\t\t\t\tinstance.main.variables[config.variable] = config.accesstoken;\n\t\t\t\tinstance.newvariables(instance.main.variables);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component can obtain OAuth 2.0 access token from 3rd party service.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings padding\">\n\t\t<p>To obtain an OAuth 2.0 access token, you must follow the OAuth 2.0 specification on the service you want to use.</p>\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.urlauthorize\" config=\"required:1;type:url;innerlabel:1;placeholder:Enter a value\">Authorize URL</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.urltoken\" config=\"required:1;type:url;innerlabel:1;placeholder:Enter a value\">Token URL</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr class=\"nmt\" />\n\t\t<div class=\"fs12 m\"><i class=\"ti ti-globe mr5\"></i>Your redirect URL: <b><ui-bind path=\"flow.head.notify\" config=\"text;empty\" class=\"red\"></ui-bind></b></div>\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.clientid\" config=\"required:1;camouflage:1;innerlabel:1;placeholder:Enter client id\">Client ID</ui-component>\n\t\t\t\t<div class=\"help\">Required</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.clientsecret\" config=\"required:1;camouflage:1;innerlabel:1;placeholder:Enter client secret\">Client secret</ui-component>\n\t\t\t\t<div class=\"help\">Required</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.scope\" config=\"required:0;innerlabel:1;placeholder:email,profile\">Scope</ui-component>\n\t\t\t\t<div class=\"help\">Optional</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m center\">\n\t\t\t<p>To obtain of OAuth 2.0 access token, you must click on the button below.</p>\n\t\t\t<div style=\"width:150px;margin:0 auto\">\n\t\t\t\t<button class=\"button exec b\" data-exec=\"tmpoauth2.authorize\"><ui-bind path=\"?\" config=\"enabled:value.urlauthorize && value.urltoken && value.clientid && value.clientsecret\" disabled></ui-bind><i class=\"ti ti-key\"></i>Authorize</button>\n\t\t\t</div>\n\t\t\t<br />\n\t\t</div>\n\t\t<ui-bind path=\"?.accesstoken\" config=\"show\" class=\"hidden\">\n\t\t\t<div class=\"grid-2\">\n\t\t\t\t<div class=\"m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.accesstoken\" config=\"required:1;disabled:1;innerlabel:1;placeholder:Will be filled automatically after authorization\">Access token</ui-component>\n\t\t\t\t\t<div class=\"help\">OAuth 2.0 access token</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.variable\" config=\"innerlabel:1;placeholder:Enter a variable key\">Assign token to the global variable</ui-component>\n\t\t\t\t\t<div class=\"help\">The access token will be automatically assigned into the global variables</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t\t<ui-bind path=\"?.response\" config=\"html pre:value ? Thelpers.jsonformat(value) : ''__show\" class=\"hidden bg-smoke block\">\n\t\t\t<div class=\"padding\">\n\t\t\t\t<div class=\"fs12\">Response:</div>\n\t\t\t\t<pre style=\"font-size:12px;tab-size:4;margin:0;padding:5px 0\"></pre>\n\t\t\t\t<div class=\"help red\"><i class=\"ti ti-exclamation-triangle\"></i>Don't forget to save settings if you change something</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .exec { cursor: pointer; }\n\t.CLASS footer { padding: 8px 8px; font-size: 11px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.accesstoken\" config=\"show\">\n\t\t\t<div><span class=\"exec link\" data-exec=\"tmpoauth2.copy\"><i class=\"ti ti-copy mr5\"></i>Copy access token</span></div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\n\t\tvar tmp = W.tmpoauth2;\n\t\tif (!tmp) {\n\t\t\ttmp = W.tmpoauth2 = {};\n\t\t\ttmp.authorize = function(el) {\n\t\t\t\tvar scope = el.scope();\n\t\t\t\tvar model = scope.get();\n\t\t\t\tvar args = {};\n\t\t\t\targs.client_id = model.clientid;\n\t\t\t\targs.response_type = 'code';\n\t\t\t\tif (model.scope)\n\t\t\t\t\targs.scope = model.scope;\n\t\t\t\targs.redirect_uri = args.redirect_url = flow.head.notify;\n\t\t\t\targs.state = exports.id;\n\n\t\t\t\tfor (var key in args) {\n\t\t\t\t\tvar val = args[key];\n\t\t\t\t\tif (val && val.indexOf('{'))\n\t\t\t\t\t\targs[key] = val.replace(/\\{.*?\\}/g, text => flow.variables[text.substring(1, text.length - 1).trim()] || text);\n\t\t\t\t}\n\n\t\t\t\tvar draft = exports.draft();\n\t\t\t\tW.open(draft.urlauthorize + QUERIFY(args));\n\t\t\t};\n\n\t\t\ttmp.copy = function(el) {\n\t\t\t\tvar config = flow.config[ATTRD(el)];\n\t\t\t\tSETTER('clipboard/copy', config.accesstoken);\n\t\t\t\tSETTER('notify/success', 'Copied');\n\t\t\t};\n\t\t}\n\n\t\texports.notify = function(data) {\n\t\t\tvar draft = exports.draft();\n\t\t\tif (draft) {\n\t\t\t\tvar query = data.query;\n\t\t\t\tvar model = {};\n\t\t\t\tmodel.url = draft.urltoken;\n\t\t\t\tmodel.client_id = draft.clientid;\n\t\t\t\tmodel.client_secret = draft.clientsecret;\n\t\t\t\tmodel.code = query.code;\n\t\t\t\tmodel.redirect_uri = flow.head.notify;\n\t\t\t\tmodel.grant_type = 'authorization_code';\n\n\t\t\t\tfor (var key in model) {\n\t\t\t\t\tvar val = model[key];\n\t\t\t\t\tif (val && val.indexOf('{'))\n\t\t\t\t\t\tmodel[key] = val.replace(/\\{.*?\\}/g, text => flow.variables[text.substring(1, text.length - 1).trim()] || text);\n\t\t\t\t}\n\n\t\t\t\texports.call({ type: 'oauth', data: model }, ERROR(function(response) {\n\t\t\t\t\texports.draft('accesstoken @change', response.access_token);\n\t\t\t\t\texports.draft('response', response);\n\t\t\t\t}), true);\n\n\t\t\t}\n\t\t};\n\n\t});\n</script>",
    "ctxj3e043": "<script total>\n\n\texports.name = 'Split';\n\texports.icon = 'ti ti-strikethrough';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? U.get(config.path, $.data) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"meno\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"meno\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"meno\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"meno\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"meno\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"meno\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.path\" config=\"show;text span\" parent=\"footer\" class=\"block\">\n\t\t\tPath: <span class=\"b\"></span>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
    "comment": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-comment';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { text: 'Comment' };\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.text\" config=\"type:markdown;parent:auto;minheight:300;margin:65\"></ui-component>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS header button { margin-left: 10px; }\n\t.CLASS footer .markdown { padding: 10px; font-size: 12px; border-top: 0 !important; color: #000; }\n\t.ui-dark .CLASS footer .markdown { color: #F0F0F0; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"button\">Open in window</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"!CONFIG.text\" config=\"html div:value.markdown(value, { element: el })\" class=\"markdown-small selectable\"><div class=\"markdown\"></div></ui-bind></footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!reinit) {\n\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\tFUNC.readme('Comment', exports.config.text || '');\n\t\t\t});\n\t\t}\n\t});\n\n</script>",
    "code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.outputs\" config=\"type:number\" class=\"m\">Number of outputs</ui-component>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></ui-component>\n\t</div>\n</settings>\n<script>\n\tTOUCH(function(exports, init) {\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar count = exports.instance.config.outputs;\n\t\t\t\tfor (let i = 1; i <= count; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + (i === 1 ? '' : i), name: (count === 1 ? 'Output' : 'Output #' + i) });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t}\n\t});\n</script>\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "object": "<script total>\n\n\texports.id = 'object';\n\texports.name = 'Object';\n\texports.icon = 'ti ti-list-alt';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Data';\n\texports.config = { template: '{\\n\\tname: {{ data.name }},\\n\\temail: {{ data.email }},\\n\\tkey: {{ variables.key }},\\n\\thostname: {{ url }},\\n\\tenv: {{ env }}\\n}' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar template;\n\t\tvar helpers = {};\n\t\tvar variables = EMPTYOBJECT;\n\n\t\thelpers.encode = function(val) {\n\n\t\t\tif (val instanceof Date)\n\t\t\t\treturn 'new Date(' + val.getTime() + ')';\n\n\t\t\tswitch (typeof(val)) {\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\tcase 'boolean':\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn val + '';\n\t\t\t\tdefault:\n\t\t\t\t\treturn val == null ? 'null' : JSON.stringify(val);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = null;\n\n\t\t\ttry {\n\t\t\t\tvar model = { data: $.data, variables: variables };\n\t\t\t\tmodel.hostname = instance.main.$schema.origin;\n\t\t\t\tmodel.url = instance.main.$schema.origin + instance.main.$schema.proxypath;\n\t\t\t\tmodel.env = instance.main.$schema.env;\n\t\t\t\tdata = template(model, null, helpers);\n\t\t\t\tdata = (new Function('return ' + data))();\n\t\t\t} catch(e) {\n\t\t\t\t$.destroy();\n\t\t\t\tinstance.throw(e);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdata && $.send('output', data);\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\n\t\t\tvariables = {};\n\n\t\t\tfor (var key in instance.main.variables2)\n\t\t\t\tvariables[key] = instance.main.variables2[key];\n\n\t\t\tfor (var key in instance.main.variables)\n\t\t\t\tvariables[key] = instance.main.variables[key];\n\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttemplate = config.template ? Tangular.compile(config.template) : NOOP;\n\t\t};\n\n\t\tinstance.configure();\n\t\tinstance.variables();\n\n\t};\n\n</script>\n\n<readme>\nThe component creates an object from the defined string (Tangular) template. With the help of the Tangular template engine, you can use conditions, loops, etc..\n\n__Available markup__:\n\n- `{{ data.key }}` represents data\n- `{{ variables.key }}` represents local and global Flow variables\n- `{{ hostname }}` contains a current URL address to the main Flow app `{String}`\n- `{{ url }}` contains a current URL address to the current Flow `{String}`\n- `{{ env }}` contains a current environment `{String}`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<p>Design your object with the help of the <a href=\"https://docs.totaljs.com/components/40d06002lm50c/#advanced-functionality\" target=\"_blank\">Tangular template engine</a>. All values are automatically transformed into JavaScript types.</p>\n\t\t<ui-component name=\"input\" path=\"?.template\" config=\"type:multiline;height:300;tabs:1;monospace:1\"></ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "cuq1sfb557": "<script total>\n\n\texports.name = 'SQLite3';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.npm = ['better-sqlite3'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst Database = require('better-sqlite3');\n\t\tvar db, file;\n\t\tvar fns = ['run', 'get', 'all', 'exec'];\n\n\t\tinstance.message = function($) {\n\t\t\tif (!db) {\n\t\t\t\t$.send('error', { error: 'db not ready' });\n\t\t\t\treturn instance.throw('SQLite3 not ready');\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data.prepare || !data.fn) {\n\t\t\t\tinstance.throw('No `prepare` or `op` provided');\n\t\t\t\treturn $.send('error', { error: 'invalid input data' });;\n\t\t\t}\n\n\t\t\tif (fns.indexOf(data.fn) < 0) {\n\t\t\t\tinstance.throw('Unsupported function: ' + data.fn);\n\t\t\t\treturn $.send('error', { error: 'unsupported function' });\n\t\t\t}\n\n\t\t\tif (data.fn === 'exec') {\n\t\t\t\tlet result = db.exec(data.prepare);\n\t\t\t\treturn $.send('output2', result);\n\t\t\t}\n\n\t\t\tlet stmt = db.prepare(data.prepare);\n\t\t\tlet result = data.data ? stmt[data.fn](data.data) : stmt[data.fn]();\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tlet newfile = PATH.databases(config.filename || `${instance.id}.sqlite`);\n\t\t\tif (file === newfile)\n\t\t\t\treturn;\n\n\t\t\tfile = newfile;\n\n\t\t\tlet tmp = exports.DBS[file];\n\t\t\tif (tmp) {\n\t\t\t\tdb = tmp.db;\n\t\t\t\ttmp.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdb = new Database(file, { verbose: console.log });\n\t\t\texports.DBS[file] = {\n\t\t\t\tdb,\n\t\t\t\tcount: 1\n\t\t\t};\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (file && db) {\n\t\t\t\texports.DBS[file].count--;\n\t\t\t\tif (exports.DBS[file].count === 0) {\n\t\t\t\t\tdb && db.close();\n\t\t\t\t\tdb = null;\n\t\t\t\t\tdelete exports.DBS[file];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nSQLite3 [Documentation](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md)\n\n```js\n{\n\t// query\n\tprepare: 'INSERT INTO cats (name, age) VALUES (?, ?)',\n\n\t// function name: run, get, all, exec\n\tfn: 'run',\n\n\t// data, optional\n\tdata: ['Joey', 2] // string/number or array\n\n}\n```\n\nFunctions:\n\t- [run](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#runbindparameters---object)\n\t- [get](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#getbindparameters---row)\n\t- [all](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#allbindparameters---array-of-rows)\n\t- [exec](https://github.com/JoshuaWise/better-sqlite3/blob/HEAD/docs/api.md#execstring---this)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.filename\" config=\"placeholder:mydatabase\">Filename (optional)</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
    "cv1yv14fb3": "<script total>\n\n\texports.name = 'PostgreSQL';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['pg'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { Pool } = require('pg')\n\t\tvar PG;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!PG || !PG.pool)\n\t\t\t\treturn $.send('output', { error: 'Postgre connection not configured' });\n\n\t\t\tPG.pool.query(data.query, (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\t\t\t\t\t\n\t\t\t\tvar { command, rows, rowCount } = response;\n\t\t\t\t$.send('output', { command, rows, rowCount });\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (PG && PG.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tPG = exports.POOLS[config.connection];\n\t\t\t\tPG.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = new Pool({ connectionString: config.connection });\n\t\t\tPG = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.on('error', (err, client) => {\n\t\t\t\tconsole.log('[PG] Unexpected error on idle client', err);\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (PG) {\n\t\t\t\tPG.count--;\n\t\t\t\tif (PG.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tPG.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tPG = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nPostgreSQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\nOutput:\n```javascript\n{\n\tcommand: 'INSERT', // SELECT, etc.\n\trows: [], // \n\trowCount: 1\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">e.g.: postgresql://user:password@localhost:5432/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text\" class=\"red\"></ui-bind>\n\t</footer>\n</body>",
    "cvgzj3a276": "<script total>\n\n\texports.name = 'Connections';\n\texports.icon = 'ti ti-network';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, port: 80 };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { connections: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (config.port <= 0)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('netstat -an | grep :{0} | wc -l'.format(config.port), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar connections = response.trim().parseInt2() - 1;\n\n\t\t\t\tif (connections < 0)\n\t\t\t\t\tconnections = 0;\n\n\t\t\t\tstats.port = config.port;\n\t\t\t\tstats.connections = Math.max(stats.connections || 0, connections || 0);\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors open connections to the specific port in the Linux systems for the specific process. It uses `netstat` command.\n\n__Data Example__:\n\n```js\n{\n\tport: 80,\n\tconnections: 54\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.port\" config=\"type:number;required:1\">Port number</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"type:number;required:1\">Interval</ui-component>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"!STATUS\" config=\"template;show\">\n\t\t<script type=\"text/html\">\n\t\t\t<div><b>{{ value.port }}</b>Port</div>\n\t\t\t<div><b>{{ value.connections }}x</b>Connections</div>\n\t\t</script>\n\t</footer>\n</body>",
    "cvijc1b73d": "<script total>\n\n\texports.name = 'CPU';\n\texports.icon = 'ti ti-microchip';\n\texports.group = 'Linux Monitoring';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Peter Širka';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, cores: [] };\n\t\tvar delay;\n\n\t\tvar send = function() {\n\t\t\tdelay = null;\n\n\t\t\tfor (var i = 0; i < stats.cores.length; i++) {\n\t\t\t\tif (stats.cores[i] == null)\n\t\t\t\t\tstats.cores[i] = 0;\n\t\t\t}\n\n\t\t\tinstance.send('output', CLONE(stats));\n\t\t};\n\n\t\tvar proc = require('child_process').spawn('mpstat', ['-P', 'ALL', '10']);\n\n\t\tproc.on('close', function() {\n\t\t\tproc = null;\n\t\t});\n\n\t\tproc.on('error', function(err) {\n\t\t\tinstance.send('error', err + '');\n\t\t});\n\n\t\tproc.stdout.on('data', function(response) {\n\t\t\tresponse.toString('utf8').parseTerminal(function(arr) {\n\n\t\t\t\tif (arr[2] === 'all') {\n\t\t\t\t\tstats.cpu = (arr[3] || '').parseFloat2();\n\t\t\t\t\tinstance.status(stats.cpu);\n\t\t\t\t} else {\n\t\t\t\t\tvar index = (arr[2] || '').parseInt2();\n\t\t\t\t\tstats.cores[index] = (arr[3] || '').parseFloat2();\n\t\t\t\t}\n\n\t\t\t\tdelay && clearTimeout(delay);\n\t\t\t\tdelay = setTimeout(send, 100);\n\t\t\t}, 1);\n\t\t});\n\n\t\tinstance.close = function() {\n\t\t\tclearTimeout(delay);\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU `% percentage` consumption in the Linux systems. It uses `mpstat` command with 10 seconds interval.\n\n__Data Example__:\n\n```js\n{\n\tcpu: 30, // percentage\n\tcores: [4, 60, 0], // percentage\n\tcount: 3 // count of cores\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n\t.CLASS footer .progress { border: 1px solid #E0E0E0; padding: 1px; margin-bottom: 3px; }\n\t.CLASS footer .progress > div { height: 4px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-component name=\"progress\" path=\"!STATUS\"></ui-component>\n\t</footer>\n</body>",
    "cvjoie2e3": "<script total>\n\n\texports.name = 'HDD';\n\texports.icon = 'ti ti-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 60, path: '/' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Total.js';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('df -hTB1 {0}'.format(config.path), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresponse.parseTerminal(function(info) {\n\t\t\t\t\tstats.total = info[2].parseInt();\n\t\t\t\t\tstats.free = info[4].parseInt();\n\t\t\t\t\tstats.used = info[3].parseInt();\n\t\t\t\t}, 1);\n\n\t\t\t\tinstance.status(stats);\n\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors HDD consumption (in MB) in the Linux systems. It uses `df` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > ui-bind > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"type:number;required:1\">Interval</ui-component>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"required:1\">Path</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"template;show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "cvl4z432ee": "<script total>\n\n\texports.name = 'Memory';\n\texports.icon = 'ti ti-hdd';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.author = 'Total.js';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { free: 0, total: 0, used: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\t\t\tF.Child.exec('free -b -t', function(err, response) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar memory = response.split('\\n')[1].match(/\\d+/g);\n\t\t\t\t\tstats.total = memory[0].parseInt();\n\t\t\t\t\tstats.free = (memory[2].parseInt() + memory[4].parseInt());\n\t\t\t\t\tstats.used = memory[1].parseInt();\n\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\tstats.total = (stats.total / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.free = (stats.free / 1024 / 1024).floor(2);\n\t\t\t\t\tstats.used = (stats.used / 1024 / 1024).floor(2);\n\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors a memory consumption (in MB) in the Linux systems. It uses `free` command.\n\n__Data Example__:\n\n```js\n{\n\tfree: 0,\n\ttotal: 0,\n\tused: 0\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > ui-bind > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"type:number;required:1\">Interval</ui-component>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"template;show\" class=\"block\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.free | filesize }}</b>Free</div>\n\t\t\t\t<div><b>{{ value.used | filesize }}</b>Used</div>\n\t\t\t\t<div><b>{{ value.total | filesize }}</b>Total</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "cvmi90dfc6": "<script total>\n\n\texports.name = 'Process';\n\texports.icon = 'ti ti-chart-bar';\n\texports.group = 'Linux Monitoring';\n\texports.config = { interval: 10, grep: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.author = 'Total.js';\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { cpu: 0, memory: 0 };\n\t\tvar interval;\n\n\t\tvar measure = function() {\n\n\t\t\tif (!config.grep)\n\t\t\t\treturn;\n\n\t\t\tF.Child.exec('ps aux | grep \"{0}\" | grep -v \"grep\" | awk {\\'print $2\\'}'.format(config.grep), function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.send('error', err + '');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pid = response.trim().split('\\n');\n\t\t\t\tvar count = pid.length;\n\t\t\t\tpid = pid.join(',');\n\t\t\t\tif (!pid) {\n\t\t\t\t\tinstance.send('error', 'No process');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tF.Child.exec('ps -p {0} -o %cpu,rss,etime'.format(pid), function(err, response) {\n\t\t\t\t\tvar line = response.split('\\n')[1];\n\t\t\t\t\tline = line.trim().replace(/\\s{2,}/g, ' ').split(' ');\n\t\t\t\t\tstats.count = count;\n\t\t\t\t\tstats.grep = config.grep;\n\t\t\t\t\tstats.cpu = line[0].parseFloat();\n\t\t\t\t\tstats.memory = line[1].parseInt() * 1024; // kB to bytes\n\t\t\t\t\tstats.uptime = line[2];\n\n\t\t\t\t\t// Open Files\n\t\t\t\t\tF.Child.exec('ls /proc/{0}/fd/ | wc -l'.format(pid), function(err, response) {\n\t\t\t\t\t\tstats.files = response.trim().parseInt2();\n\t\t\t\t\t\tinstance.status(stats);\n\t\t\t\t\t\tstats.memory = (stats.memory / 1024 / 1024).floor(2);\n\t\t\t\t\t\tinstance.send('output', stats);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(measure, config.interval * 1000);\n\t\t\tsetImmediate(measure);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors CPU (in %) and Memory consumption (in MB) in the Linux systems for the specific process. It uses `ps` command.\n\n__Data Example__:\n\n```js\n{\n\tgrep: 'nginx',\n\tcpu: 0.5,\n\tmemory: 45,\n\tfiles: 343,\n\tuptime: '1 day'\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > ui-bind > div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"type:number;required:1\">Interval</ui-component>\n\t\t\t\t<div class=\"help\">In seconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.grep\" config=\"required:1\">App name</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"template;show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.grep }}</b>Name</div>\n\t\t\t\t<div><b>{{ value.count }}</b>Processes</div>\n\t\t\t\t<div><b>{{ value.cpu }}%</b>CPU</div>\n\t\t\t\t<div><b>{{ value.files }}</b>Open files</div>\n\t\t\t\t<div><b>{{ value.memory | filesize }}</b>Memory</div>\n\t\t\t\t<div><b>{{ value.uptime }}</b>Uptime</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "cvnq27cb8": "<script total>\n\n\texports.name = 'Tail';\n\texports.icon = 'ti ti-file';\n\texports.group = 'Linux Monitoring';\n\texports.config = { path: '/var/log/syslog' };\n\texports.author = 'Total.js';\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.version = '1';\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = { value: '' };\n\t\tvar proc;\n\n\t\tvar watch = function() {\n\n\t\t\tproc && proc.kill(9);\n\n\t\t\tproc = require('child_process').spawn('tail', ['-n 1', '-f', config.path]);\n\n\t\t\tproc.on('close', function() {\n\t\t\t\tproc = null;\n\t\t\t});\n\n\t\t\tproc.on('error', function(err) {\n\t\t\t\tinstance.send('error', err + '');\n\t\t\t});\n\n\t\t\tproc.stdout.on('data', function(response) {\n\t\t\t\tstats.value = response.toString('utf8').trim();\n\t\t\t\tstats.date = new Date();\n\t\t\t\tinstance.status(stats);\n\t\t\t\tinstance.send('output', stats);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (proc) {\n\t\t\t\tproc.kill(9);\n\t\t\t\tproc = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\twatch();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component monitors last line in some text file with the help of `tail` command in the Linux systems.\n\n__Data Example__:\n\n```js\n{\n\tvalue: 'Some meessage'\n\tdate: Date\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 5px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.path\" config=\"required:1\">Path</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME - <code><ui-bind path=\"CONFIG.path\" config=\"text;empty\"></ui-bind></code>\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"template;show:value.value\" class=\"block\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"b\">{{ value.date | format('HH:mm:ss') }}</div>\n\t\t\t\t<div>{{ value.value }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "cvu3wceecf": "<script total>\n\n\texports.name = 'CORS';\n\texports.group = 'REST API';\n\texports.icon = 'ti ti-html5';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { hostnames: [] };\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar route = null;\n\n\t\tinstance.close = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\troute = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\tvar url = config.hostnames.join(',');\n\t\t\troute = url ? CORS(url) : CORS();\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component enables Cross-Origin Resource Sharing `CORS`, so the web browser will be able to communicate directly with the REST API. The functionality will work only with a defined Proxy endpoint for this Flow.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"textboxlist\" path=\"?.hostnames\" config=\"maxlength:50;placeholder:https://www.totaljs.com\" class=\"m\">Hostnames with a protocol</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"ti ti-html5\" style=\"font-size:50px;color:#BD6B27\"></i>\n\t\t<div class=\"mt10 fs12\">CORS enabled</div>\n\t</div>\n</body>",
    "cvvxm8ad62": "<script total>\n\n\texports.name = 'Database';\n\texports.group = 'REST API';\n\texports.icon = 'ti ti-database';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Database', items: [] };\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar item = cache[$.input];\n\t\t\tif (!item) {\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar builder = null;\n\t\t\tvar data = $.data;\n\t\t\tvar params = data.params || EMPTYOBJECT;\n\t\t\tvar query = data.query || EMPTYOBJECT;\n\t\t\tvar user = data.user || EMPTYOBJECT;\n\n\t\t\tdata = data.data || data.body;\n\n\t\t\tswitch (item.command) {\n\t\t\t\tcase 'create':\n\t\t\t\t\tbuilder = DB().insert(item.table, data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\t\t\t\t\tbuilder = DB().update(item.table, data);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remove':\n\t\t\t\t\tbuilder = DB().remove(item.table);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'read':\n\t\t\t\t\tbuilder = DB().read(item.table);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\tif (item.sort) {\n\t\t\t\t\t\tfor (var m of item.sort)\n\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'query':\n\t\t\t\t\tbuilder = DB().find(item.table);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\titem.limit && builder.take(item.limit);\n\t\t\t\t\tif (item.sort) {\n\t\t\t\t\t\tfor (var m of item.sort)\n\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'list':\n\t\t\t\t\tbuilder = DB().list(item.table);\n\t\t\t\t\tbuilder.autoquery(query, item.allowed, item.sort ? (item.sort[0] + '_' + item.sort[1]) : null, item.limit || 100);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (builder) {\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t$.send('error', [{ error: err + '' }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar path = item.path;\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\tU.set($.data, path, response);\n\t\t\t\t\t\t\t$.send('output');\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\t$.send('error', [{ error: 'Not configured' }]);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar inputs = [];\n\t\t\tvar builder;\n\t\t\tvar tmp;\n\n\t\t\tfor (var item of config.items) {\n\n\t\t\t\tvar obj = {};\n\n\t\t\t\tobj.command = item.command;\n\t\t\t\tobj.table = item.table;\n\t\t\t\tobj.path = item.path;\n\t\t\t\tobj.limit = item.limit;\n\t\t\t\tobj.error = item.error;\n\n\t\t\t\tbuilder = [];\n\n\t\t\t\tfor (var m of item.where) {\n\t\t\t\t\tvar val = 'null';\n\t\t\t\t\tswitch (m.type) {\n\t\t\t\t\t\tcase '1':\n\t\t\t\t\t\t\tval = m.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '2':\n\t\t\t\t\t\t\tval = '\\'' + m.value.replace(/'/g, '\\\\\\'') + '\\'';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\tval = m.value.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\tval = m.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === '1' || m.value === 'true' || val === 'on';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\tval = m.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === 'now' ? 'new Date()' : m.value.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '6':\n\t\t\t\t\t\t\tval = 'null';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbuilder.push('where(\\'{0}\\', \\'{1}\\', {2})'.format(m.name, m.comparer, val));\n\t\t\t\t}\n\n\t\t\t\tobj.where = builder.length ? new Function('params', 'data', 'query', 'user', 'refs', '$', 'builder', 'builder.' + builder.join('.')) : null;\n\n\t\t\t\ttmp = obj.sort;\n\t\t\t\tif (tmp) {\n\t\t\t\t\tobj.sort = [];\n\t\t\t\t\ttmp = tmp.split(/,|;/);\n\t\t\t\t\tfor (var m of tmp) {\n\t\t\t\t\t\tm = m.trim().split(' ');\n\t\t\t\t\t\tm[1] = (m[1] || '').toLowerCase() === 'asc';\n\t\t\t\t\t\tobj.sort.push(m);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tobj.fields = item.fields === '*' ? '' : item.fields;\n\t\t\t\tobj.allowed = '';\n\n\t\t\t\tif (item.filter && item.filter.length) {\n\t\t\t\t\tfor (var m of item.filter) {\n\t\t\t\t\t\ttmp = 'string';\n\t\t\t\t\t\tswitch (m.type) {\n\t\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\t\ttmp = 'number';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\t\ttmp = 'boolean';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\t\ttmp = 'date';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobj.allowed += (obj.allowed ? ',' : '') + m.name + ':' + tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcache[item.id] = obj;\n\t\t\t\tinputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\tvar prev = JSON.stringify(instance.inputs);\n\t\t\tvar curr = JSON.stringify(inputs);\n\n\t\t\tif (curr !== prev) {\n\t\t\t\tinstance.inputs = inputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component can perform some operations on a database with the help of Total.js QueryBuilder. First, you must initialize the connection string for the database via QueryBuilder initialization.\n\n__Input data__:\n\n- `data {Object}` or `body {Object}` optional - payload\n- `query {Object}` optional - query data, key/value must be string\n- `params {Object}` optional - dynamic values, key/value must be string\n- `user {Object}` optional - a user instance\n\n__Output__:\n\n- `insert` returns Number\n- `update` returns Number\n- `remove` returns Number\n- `query` returns Array of Objects\n- `read` returns Object\n- `list` returns:\n\n```json\n{\n\titems: Array,\n\tpage: Number,\n\tpages: Number,\n\tcount: Number\n}\n```\n\nQuery parameters for the `List` operation can contain the below fields which can affect filtering according to the values defined in the dynamic filter.\n\n- `sort {String}` can contain field name with `_asc` or `_desc` value\n- `fields {String}` can return only specified fields separated by comma\n- `page {Number}` page number\n- `limit {Number}` max. items per page (default: max. limit)\n- `column_name=VALUE` enables dynamic filtering\n\n---\n\n__Good to know__: If the `data` (payload) can contain special key names in the form:\n\n- `+key` increments a value\n- `-key` decrements a value\n- `!key` performs toggle for boolean values\n- `>key` stores only greater value\n- `<key` stores only lower value\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings .ui-listform-item .item { padding: 7px 10px; }\n\t.CLASS-settings .listing .item { line-height: 34px; font-size: 12px; background-color: #F8F8F8; border-radius: var(--radius); margin-bottom: 2px; padding: 0 10px; cursor: pointer; }\n\t.CLASS-settings .listing .item:hover { background-color: #E8E8E8; }\n\t.ui-dark .CLASS-settings .listing .item { background-color: #333; }\n\t.ui-dark .CLASS-settings .listing .item.selected { background-color: #404040; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n</body>\n\n<settings>\n\n\t<ui-component name=\"box\" path=\"common.form2\" config=\"if:apidatabasefieldform;title:Database operation;zindex:30;width:800;submit:tmpapidatabase.save\" plugin=\"apidatabasefieldform__isolated:1\">\n\t\t<div class=\"padding CLASS-settings\">\n\n\t\t\t<ul class=\"tabmenu\" data---=\"tabmenu__?.command__null__'list'\">\n\t\t\t\t<li data-value=\"list\">List</li>\n\t\t\t\t<li data-value=\"query\">Query</li>\n\t\t\t\t<li data-value=\"read\">Read</li>\n\t\t\t\t<li data-value=\"create\">Create</li>\n\t\t\t\t<li data-value=\"update\">Update</li>\n\t\t\t\t<li data-value=\"remove\">Delete</li>\n\t\t\t</ul>\n\t\t\t<div class=\"clearfix\">&nbsp;</div>\n\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Name</ui-component>\n\t\t\t\t\t<div class=\"help\">An input name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.table\" config=\"required:1;monospace:1;align:1\">Table</ui-component>\n\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1\">Save to path</ui-component>\n\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<hr />\n\n\t\t\t<ui-bind path=\"?.command\" config=\"show:value==='list'||value==='query'||value==='read'\" class=\"row block\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number;required:1;monospace:1\">Max. limit</ui-component>\n\t\t\t\t\t<div class=\"help\">Max. records to output</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.sort\" config=\"monospace:1;align:1;placeholder:column asc\">Default sort</ui-component>\n\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-bind path=\"?.command\" config=\"disable:value==='list'\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.fields\" config=\"monospace:1;placeholder:column1, column2, column3\">Fields</ui-component>\n\t\t\t\t\t</ui-bind>\n\t\t\t\t\t<div class=\"help\">Return fields</div>\n\t\t\t\t</div>\n\t\t\t</ui-bind>\n\n\t\t\t<ui-bind path=\"?.command\" config=\"show:value!=='list'\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.error\">Error message</ui-component>\n\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t</ui-bind>\n\n\t\t\t<br />\n\n\t\t\t<div class=\"panel m\">\n\t\t\t\t<label class=\"bg-smoke\">Condition</label>\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<ui-component name=\"listform\" path=\"?.where\" config=\"autofocus:1;empty:You do not have defined any rules\">\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"ti ti-long-arrow-up\"></i></button><button name=\"down\"><i class=\"ti ti-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"ti ti-trash\"></i></button></div><i class=\"ti ti-filter mr5\"></i>{{ name }} {{ comparer }} <b>{{ if type == '6' }}null{{ else }}{{ value }}{{ fi }}</b></div>\n\t\t\t\t\t\t</script>\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;align:1;monospace:1\" default=\"'id'\">Name</ui-component>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.comparer\" config=\"required:1;align:1;dirsource:tmpapidatabase.comparers\" default=\"'='\">Comparer</ui-component>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;align:1;dirsource:tmpapidatabase.types\" default=\"'1'\">Type</ui-component>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.type\" config=\"enable:value!=='6'\">\n\t\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.value\" config=\"monospace:1;align:1\" default=\"''\">Value</ui-component>\n\t\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"help\"><b>Expression</b> supports these commands <code>params {Object}</code>, <code>query {Object}</code>, <code>data {Object}</code>, <code>user {Object}</code>. A value for date field can contain <code>now</code> with the current date/time.</div>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<ui-component name=\"validate\" path=\"?\" config=\"validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n\t\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t\t</ui-component>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</script>\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t\t</script>\n\t\t\t\t\t</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<ui-bind path=\"?.command\" config=\"show:value==='list'\" class=\"panel hidden block\">\n\t\t\t\t<label class=\"bg-smoke\">Dynamic filter</label>\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<ui-component name=\"listform\" path=\"?.filter\" config=\"autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"ti ti-long-arrow-up\"></i></button><button name=\"down\"><i class=\"ti ti-long-arrow-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"ti ti-trash\"></i></button></div><i class=\"ti ti-filter mr5\"></i>{{ name }} <b>{{ type | tmpapidatabasetype }}</b></div>\n\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;align:1;monospace:1\" default=\"'name'\">Name</ui-component>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;align:1;dirsource:tmpapidatabase.types2\" default=\"'2'\">Type</ui-component>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<ui-component name=\"validate\" path=\"?\" config=\"validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"ti ti-check-circle\"></i>Save</button>\n\t\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t\t</ui-component>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t\t</script>\n\n\t\t\t\t\t</ui-component>\n\t\t\t\t</div>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<nav>\n\t\t\t<ui-component name=\"validate\" path=\"?\">\n\t\t\t\t<button name=\"submit\" disabled>APPLY</button>\n\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t</ui-component>\n\t\t</nav>\n\t</ui-component>\n\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Name</ui-component>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapidatabase.add\"><i class=\"ti ti-plus-circle green\"></i>Add</button>\n\t\t\t\t</div>\n\t\t\t\t<label>Inputs</label>\n\t\t\t</div>\n\n\t\t\t<ui-bind path=\"?.items\" config=\"template:.item\" class=\"listing block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<div class=\"item exec\" data-id=\"{{ m.id }}\" data-exec=\"tmpapidatabase.upd\"><span class=\"controls nmr\"><button class=\"exec red\" data-prevent=\"true\" data-exec=\"tmpapidatabase.rem\"><i class=\"ti ti-trash-alt\"></i></button></span><i class=\"ti ti-crosshairs mr5\"></i>{{ m.name }} ({{ m.command | tmpapidatabasecommand }})</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmpapidatabase;\n\n\t\t\tif (!tmp) {\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.commands = [];\n\t\t\t\ttmp.commands.push({ id: 'list', name: 'List' });\n\t\t\t\ttmp.commands.push({ id: 'query', name: 'Query' });\n\t\t\t\ttmp.commands.push({ id: 'read', name: 'Read' });\n\t\t\t\ttmp.commands.push({ id: 'create', name: 'Create' });\n\t\t\t\ttmp.commands.push({ id: 'update', name: 'Update' });\n\t\t\t\ttmp.commands.push({ id: 'remove', name: 'Delete' });\n\t\t\t\ttmp.comparers = [];\n\t\t\t\ttmp.comparers.push({ id: '=', name: '=' });\n\t\t\t\ttmp.comparers.push({ id: '>', name: '>' });\n\t\t\t\ttmp.comparers.push({ id: '>=', name: '>=' });\n\t\t\t\ttmp.comparers.push({ id: '<', name: '<' });\n\t\t\t\ttmp.comparers.push({ id: '<=', name: '<=' });\n\t\t\t\ttmp.comparers.push({ id: '<>', name: '<>' });\n\n\t\t\t\ttmp.types = [];\n\t\t\t\ttmp.types.push({ id: '1', name: 'Expression' });\n\t\t\t\ttmp.types.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types.push({ id: '5', name: 'Date' });\n\t\t\t\ttmp.types.push({ id: '6', name: 'NULL' });\n\n\t\t\t\ttmp.types2 = [];\n\t\t\t\ttmp.types2.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types2.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types2.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types2.push({ id: '5', name: 'Date' });\n\n\t\t\t\tThelpers.tmpapidatabasetype = function(val) {\n\t\t\t\t\treturn tmp.types2.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tThelpers.tmpapidatabasecommand = function(val) {\n\t\t\t\t\treturn tmp.commands.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\ttmp.add = function() {\n\t\t\t\t\tSET('apidatabasefieldform @reset @showloading', { id: Date.now().toString('36'), name: 'Input', where: [], filter: [], command: 'list', limit: 100 });\n\t\t\t\t\tSET('common.form2 @hideloading', 'apidatabasefieldform');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar model = GET(tmp.path);\n\t\t\t\t\tvar index = model.items.findIndex('id', id);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tmodel.items.splice(index, 1);\n\t\t\t\t\t\tUPD(tmp.path + ' @change');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.upd = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar model = GET(tmp.path);\n\t\t\t\t\tvar item = model.items.findItem('id', id);\n\t\t\t\t\tif (item) {\n\t\t\t\t\t\tSET('apidatabasefieldform @reset @showloading', CLONE(item));\n\t\t\t\t\t\tSET('common.form2 @hideloading', 'apidatabasefieldform');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.save = function(hide) {\n\t\t\t\t\tvar item = CLONE(apidatabasefieldform);\n\t\t\t\t\tvar model = GET(tmp.path);\n\t\t\t\t\tvar index = model.items.findIndex('id', item.id);\n\n\t\t\t\t\tif (item.command !== 'list')\n\t\t\t\t\t\titem.filter = [];\n\n\t\t\t\t\tif (index === -1)\n\t\t\t\t\t\tmodel.items.push(item);\n\t\t\t\t\telse\n\t\t\t\t\t\tmodel.items[index] = item;\n\t\t\t\t\tUPD(tmp.path + ' @change');\n\t\t\t\t\thide();\n\t\t\t\t};\n\n\t\t\t\tW.tmpapidatabase = tmp;\n\t\t\t}\n\n\t\t\ttmp.path = meta.path;\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar inputs = [];\n\t\t\t\tfor (var item of exports.config.items)\n\t\t\t\t\tinputs.push({ id: item.id, name: item.name });\n\t\t\t\texports.instance.inputs = inputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
    "cvx5pbc7fc": "<script total>\n\n\texports.name = 'Error';\n\texports.icon = 'ti ti-bug';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'REST API';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar output = [];\n\n\t\t\tif (!(data instanceof Array))\n\t\t\t\tdata = [data];\n\n\t\t\tfor (var m of data) {\n\t\t\t\tvar err = null;\n\t\t\t\tif (m instanceof Error)\n\t\t\t\t\terr = m.message;\n\t\t\t\telse if (typeof(m) === 'string')\n\t\t\t\t\terr = m;\n\t\t\t\telse if (m)\n\t\t\t\t\terr = m.error || m.err  || m.e || m.message;\n\t\t\t\terr && output.push({ name: $.from.module.name, error: err });\n\t\t\t}\n\n\t\t\tif (output.length)\n\t\t\t\t$.send('output', output);\n\t\t\telse\n\t\t\t\t$.destroy();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThis component transforms incoming data to the Total.js Error structure.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "cvzw00f0bf": "<script total>\n\n\texports.name = 'Remember';\n\texports.group = 'REST API';\n\texports.icon = 'ti ti-save';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'remember', name: 'Remember' }, { id: 'request', name: 'Request' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache;\n\n\t\tinstance.message = function($) {\n\n\t\t\tif ($.input === 'remember') {\n\t\t\t\tcache = $.data;\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar val = cache;\n\n\t\t\tif (val == null)\n\t\t\t\tval = null;\n\n\t\t\tif (config.path)\n\t\t\t\tU.set($.data, config.path, val);\n\t\t\telse\n\t\t\t\t$.data = val;\n\n\t\t\t$.send('response');\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe primary goal of this component is to remember data. The component contains two inputs:\n\n- Remember input for remembering data\n- Request input as a trigger for obtaining data, then remembered data would extend the request message (its data), and the component will send it to the Response output\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property\">Set remembered data to the specific property/field</ui-component>\n\t\t<div class=\"help\">If you don't enter the property, the remembered data will replace data on the Request input.</div>\n\t</div>\n</settings>",
    "cw12s2ad88": "<script total>\n///\n\texports.name = 'Redirect';\n\texports.icon = 'ti ti-share';\n\texports.group = 'REST API';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { url: '', permanent: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data || EMPTYOBJECT;\n\n\t\t\tif (typeof(data) !== 'object')\n\t\t\t\tdata = EMPTYOBJECT;\n\n\t\t\tvar url = $.variables(data.url || config.url, true);\n\n\t\t\tif (url && $.refs.controller)\n\t\t\t\t$.refs.controller.redirect(url, data.permanent === true || config.permanent === true);\n\n\t\t\t$.destroy();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\n\nIncomming data have higher priority than the values set in the Configuration form. Both the `url` and `permanent` are optional.\n\n```js\n{\n\turl: 'https://example.com',\n\tpermanent: true|false\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Redirect URL address supports dynamic variables in the form <code class=\"b\">{key}</code> or <code class=\"b\">{data.key}</code>. Variables are read from global variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code>.</div>\n\t\t<ui-component name=\"input\" path=\"?.url\" config=\"innerlabel:1;required:1;placeholder:Enter absolute URL address\" class=\"m\">Redirect URL</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.permanent\" config=\"type:checkbox\">Permanent redirect</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<i class=\"ti ti-globe mr5\"></i><ui-bind path=\"CONFIG.url\" config=\"text;empty\"></ui-bind>\n\t</footer>\n</body>",
    "cw2cdf6c34": "<script total>\n\n\texports.name = 'QueryBuilder PG';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.config = { id: 'default', name: 'API PostgreSQL', url: '', pooling: 2 };\n\texports.outputs = [{ id: 'error', name: 'Error' }];\n\texports.npm = ['querybuilderpg'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar QB = require('querybuilderpg');\n\t\tvar init = false;\n\t\tvar conf;\n\n\t\tinstance.configure = function() {\n\n\t\t\tinit && QB.init(conf.id);\n\t\t\tconf = instance.replace(config);\n\n\t\t\tif (conf.url) {\n\t\t\t\tQB.init(conf.id, conf.url, conf.pooling, function(err, data) {\n\t\t\t\t\tvar msg = instance.newmessage([{ error: err + ' --> ' + data.query }]);\n\t\t\t\t\tmsg.send('error');\n\t\t\t\t});\n\t\t\t\tinit = true;\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tconf && require('querybuilderpg').init(conf.name);\n\t\t\tconf = null;\n\t\t\tinit = false;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component initializes QueryBuilder for the PostgreSQL database. So you can use the 'API Database` component. Each connection must be separated by an alias.\n\n__Usage in API Database__:\n\n- `tbl_user` is targeted to the `default/tbl_user` alias connection\n- `anotherserver/tbl_user` will use `anotherserver` alias connection\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Name</ui-component>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.id\" config=\"required:1\">Alias</ui-component>\n\t\t\t\t<div class=\"help\">The alias separates various DB connections</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1;camouflage:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">Example: postgresql://user:pass@localhost:5432/database_name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.pooling\" config=\"required:1;type:number\">Pooling</ui-component>\n\t\t\t\t<div class=\"help\">How many connections can it keep?</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 0 10px 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>QueryBuilder PG\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-pencil-paintbrush\"></i>{{ value.id }}</div>\n\t\t\t\t<div class=\"b\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "cw73ld8c35": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'ti ti-share';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data, 'text/html');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number\">Status code</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header ui-bind { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header ui-bind:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<ui-bind path=\"CONFIG.code\" config=\"text;exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></ui-bind> \n\t\t<ui-bind path=\"CONFIG.type\" config=\"text\"></ui-bind>\n\t</header>\n</body>",
    "cw8ey8a628": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'ti ti-map-pin';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"ti ti-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1\">Relative URL address</ui-component>\n\t\t\t\t<div class=\"help\">Relative path to: <ui-bind path=\"flow.head.proxyurl\" config=\"text:value?value:window.location.origin\"></ui-bind></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"required:1;type:number\">Timeout</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;ricon:!kB;align:1\">Request limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer div ui-bind { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"CONFIG.method\" config=\"show\" class=\"hidden block\">\n\t\t<div><ui-bind path=\"CONFIG.method\" config=\"text\" class=\"method\"></ui-bind> <a is=\"is-a\" path=\"CONFIG.url\" config=\"text;href:flow.head.proxyurl + (value.charAt(0)=== '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
    "cwb6e05465": "<script total>\n\n\texports.name = 'SQL query';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.group = 'REST API';\n\texports.version = '1';\n\texports.config = { id: 'default', sql: 'SELECT 1', first: false, path: '' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar id = $.variables(config.id, true);\n\t\t\tvar sql = $.variables(config.sql, true, val => typeof(val) === 'string' && val[0] === '!' ? val.substring(1) : PG_ESCAPE(val));\n\n\t\t\tDB().query(id, sql).callback(function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\t$.send('error', err);\n\t\t\t\t} else {\n\n\t\t\t\t\tif (config.first)\n\t\t\t\t\t\tresponse = response[0];\n\n\t\t\t\t\tif (config.path) {\n\t\t\t\t\t\tU.set($.data, config.path, response);\n\t\t\t\t\t\tresponse = $.data;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.send('output', response);\n\t\t\t\t}\n\t\t\t});\n\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component executes SQL command on the specifi connection. This component depends on the `API PostgreSQL` component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Connection and SQL query support dynamic variables in the form <code class=\"b\">{key}</code> or <code class=\"b\">{data.key}</code>. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code>. The component encodes all SQL values with except <code class=\"b red\">{!key}</code>.</div>\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.id\" config=\"required:1;innerlabel:1\">Connection</ui-component>\n\t\t\t\t<div class=\"help\">A connection name/identifier</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"innerlabel:1;placeholder:response\">Assign data according to the path</ui-component>\n\t\t\t\t<div class=\"help\">Otherwise, the response will replace the entire message data.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.first\" config=\"type:checkbox\">Return only the first row</ui-component>\n\t\t<hr />\n\t\t<div class=\"ui-input-label\">SQL query:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.sql\" config=\"type:sql;minheight:300;parent:auto;margin:290;tabs:true;trim:true\"></ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer> \n\t\t<ui-bind path=\"CONFIG.id\" config=\"text span;empty\">\n\t\t\tDatabase: <span class=\"b\"></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "cwcou721e9": "<script total>\n\n\texports.name = 'Token Auth';\n\texports.group = 'REST API';\n\texports.icon = 'ti ti-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:1\">Token</ui-component>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number\">Status code</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.header\" config=\"required:1;type:lower\">Header</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.error\" config=\"required:1\">Error message</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.ddos\" config=\"required:1;type:number\">DDOS protection</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer ui-bind { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><ui-bind path=\"CONFIG.code\" config=\"text\" class=\"code\"></ui-bind><ui-bind path=\"CONFIG.header\" config=\"text\"></ui-bind></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
    "cwjvx49624": "<script total>\n\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '2';\n\texports.icon = 'ti ti-search';\n\texports.author = 'Total.js';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.schema = instance.main.$schema.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || instance.href() || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:*\">Total API token</ui-component>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.app\">App name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.reference\">Reference</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\">URL address</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.message\" config=\"required:1;maxlength:200\">Message</ui-component>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS.response\" config=\"text;show\" class=\"error hidden\"></ui-bind>\n\t</footer>\n</body>",
    "cwl4854524": "<script total>\n\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'ti ti-tablet';\n\texports.author = 'Total.js';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.to = $.variables(config.to);\n\t\t\tmsg.from = $.variables(config.from);\n\t\t\tmsg.body = config.isdata ? $.data : $.variables(config.body, $.data);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'sms', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:*\">Total API token</ui-component>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.from\">From</ui-component>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.to\">To</ui-component>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.isdata\" config=\"type:checkbox\" class=\"b mt5\">Send incoming message data only</ui-component>\n\t</div>\n\t<div data-bind=\"?.isdata__hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<ui-component name=\"input\" path=\"?.body\" config=\"maxlength:500;required:1\">Message</ui-component>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>. The component reads data from the message data and then from all defined variables.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS.response\" config=\"text;show\" class=\"error hidden block\"></ui-bind>\n\t</footer>\n</body>",
    "cwmlm413ef": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'ti ti-file';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\tval = val.parseDate();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(val instanceof Date) || isNaN(val))\n\t\t\t\t\t\t\tval = null;\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Model name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"hellip\"><span class=\"edit label\" data-edit=\"exec:tmprestmodel.label;required:1\">{{ m.label }}</span><span class=\"monospace edit key\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</span></div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name .label { background-color: #000; outline: 0; padding: 2px 3px; color: #FFF; }\n\t.CLASS-settings figure .name .key { font-weight: bold; margin-left: 5px; outline: 0; }\n\t.CLASS-settings figure .name > div:first-child { outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .name .label { background-color: #FFF; color: #000; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"ti ti-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), label: 'Name', name: 'propname', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.label = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.label = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- {0} `{1} {{2}}`'.format(m.label, m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
    "cwnxf6a748": "<script total>\n\n\texports.name = 'Data parser';\n\texports.icon = 'ti ti-compress';\n\texports.group = 'Transformations';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { type: '1', convert: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar streamer = null;\n\t\tvar reg = /,|;/;\n\n\t\tvar newmessage = function(data) {\n\n\t\t\tif (config.convert) {\n\t\t\t\tif (config.type === '1') {\n\t\t\t\t\tvar m = data.match(reg);\n\t\t\t\t\tdata = data.parseCSV(m ? m[0] : ',');\n\t\t\t\t} else\n\t\t\t\t\tdata = data.parseXML(true);\n\t\t\t}\n\n\t\t\tinstance.newmessage(data).send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (typeof(data) === 'string')\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\n\t\t\t$.destroy();\n\t\t\tdata && streamer && streamer(data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase '1':\n\t\t\t\t\tstreamer = U.streamer('\\n', newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstreamer = U.streamer(config.beg, config.end, newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstreamer = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can parse newline data or begin/end phrases in the buffer or string. In addition, it can help with parsing XML or CSV files.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"choose\" path=\"?.type__selector:div\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\">\n\t\t\t\t<i class=\"ti ti-arrow-down ti-sync\"></i>\n\t\t\t\t<span>CSV</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\">\n\t\t\t\t<i class=\"ti ti-code\"></i>\n\t\t\t\t<span>XML</span>\n\t\t\t</div>\n\t\t</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.convert\" config=\"type:checkbox\">Convert parsed value to the object</ui-component>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<ui-bind path=\"?.type\" config=\"show:value==='2'\" class=\"padding hidden block\">\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"ti ti-cog\"></i>Advanced settings</label>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.beg\" config=\"required:1;placeholder:&lt;PRODUCT&gt;\">Begin phrase</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.end\" config=\"required:1;placeholder:&lt;/PRODUCT&gt;\">End phrase</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</ui-bind>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; text-align: center; }\n\t.CLASS footer ui-bind { font-family: var(--monospace); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div>{{ if value.type === '1' }}New line{{ else }}<span>{{ value.beg }}</span> - <span>{{ value.end }}</span>{{ fi }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "cwu3w2d5c7": "<script total>\n\n\texports.id = 'crontab'\n\texports.name = 'Crontab';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Peter Širka / Total.js';\n\texports.version = '1';\n\texports.group = 'Triggers';\n\texports.config = { random: true, type: 'now', data: '', timers: ['0 9 * * *'], restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar timers = null;\n\t\tvar days = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n\t\tvar func = {};\n\n\t\tfunc.cronexec = function(output, date) {\n\n\t\t\tvar m = date.getMinutes();\n\t\t\tvar h = date.getHours();\n\t\t\tvar d = date.getDate();\n\t\t\tvar M = date.getMonth() + 1;\n\t\t\tvar day = date.getDay();\n\t\t\tvar is = true;\n\t\t\tvar values = [m, h, d, M, day];\n\n\t\t\tfor (var i = 0; i < output.length; i++) {\n\n\t\t\t\tvar val = values[i];\n\t\t\t\tvar m = output[i];\n\n\t\t\t\tif (m.type === 'equal') {\n\t\t\t\t\tif (m.value !== val) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (m.type === 'every') {\n\t\t\t\t\tif (m.value % val !== 0) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (m.type === 'in') {\n\t\t\t\t\tif (!m.value.includes(val)) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (m.type === 'between') {\n\t\t\t\t\tif (val < m.value[0] || val > m.value[1]) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn is;\n\t\t};\n\n\t\tfunc.cronmake = function(line) {\n\n\t\t\t// */15 = every 15\n\t\t\t// 1-2  = BETWEEN\n\t\t\t// 1,2  = IN\n\n\t\t\tvar days = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n\t\t\tvar arr = line.toLowerCase().replace(/[a-z]+/g, text => days.indexOf(text.substring(0, 2))).split(/\\s|\\t/).trim();\n\t\t\tvar output = [];\n\n\t\t\tfor (var m of arr) {\n\n\t\t\t\tvar obj = {};\n\t\t\t\tvar tmp = null;\n\n\t\t\t\tif (m === '*') {\n\t\t\t\t\tobj.type = '*';\n\t\t\t\t} else if (m.indexOf('/') !== -1) {\n\t\t\t\t\ttmp = m.split('/');\n\t\t\t\t\tobj.type = 'every';\n\t\t\t\t\tfor (let i = 0; i < tmp.length; i++) {\n\t\t\t\t\t\tif (tmp[i] !== '*')\n\t\t\t\t\t\t\ttmp[i] = +tmp[i];\n\t\t\t\t\t}\n\t\t\t\t\tobj.value = tmp;\n\t\t\t\t} else if (m.indexOf(',') !== -1) {\n\t\t\t\t\ttmp = m.split(',');\n\t\t\t\t\tobj.type = 'in';\n\t\t\t\t\tfor (let i = 0; i < tmp.length; i++)\n\t\t\t\t\t\ttmp[i] = +tmp[i];\n\t\t\t\t\tobj.value = tmp;\n\t\t\t\t} else if (m.indexOf('-') !== -1) {\n\t\t\t\t\ttmp = m.split('-');\n\t\t\t\t\tobj.type = 'between';\n\t\t\t\t\tfor (let i = 0; i < tmp.length; i++)\n\t\t\t\t\t\ttmp[i] = +tmp[i];\n\t\t\t\t\tobj.value = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tobj.type = 'equal';\n\t\t\t\t\tobj.value = +m;\n\t\t\t\t}\n\n\t\t\t\toutput.push(obj);\n\t\t\t}\n\n\t\t\treturn function(date) {\n\t\t\t\treturn func.cronexec(output, date);\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimers = [];\n\t\t\tfor (var m of config.timers)\n\t\t\t\ttimers.push(func.cronmake(m));\n\t\t};\n\n\t\tvar send = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'now':\n\t\t\t\t\tval = new Date();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.newmessage(val).send('output');\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tsend();\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tvar dt = config.offset ? new Date(NOW.getTime() - (config.offset * 60 * 1000)) : NOW;\n\t\t\tfor (var m of timers) {\n\t\t\t\tif (m(dt)) {\n\t\t\t\t\tsend();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t\tconfig.restart && setInterval(send, 5000);\n\n\t};\n\n</script>\n\n<readme>\nThe component can make a trigger in the specific time and date.\n\n## Cron string: `* * * * *`\n\nMeaning of each `*` explained bellow, in order from left to right:\n\n- minute `0 - 59`\n- hour `0 - 23`\n- day of month `1 - 31`\n- month `1 - 12`\n- day of week `0 - 6` and `0` is Sunday\n\n```\n0 16 * * *      -> trigger every day at 16:00\n20 19 * * *     -> every day at 19:20 and 19:40\n* * * * *       -> trigger every minute\n0 20 * * 1      -> every monday at 20:00\n```\n</readme>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS-settings input { font-family: Menlo, Consolas, monospace; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASS-settings\">\n\n\t\t<ui-component name=\"textboxlist\" path=\"?.timers\" config=\"maxlength:50;required:1;placeholder:* 1 * * *\" class=\"m\">Timers</ui-component>\n\n\t\t<div class=\"help monospace\">\n\t\t\t<div>* * * * *</div>\n\t\t\t<div>1MINUTE 2HOUR 3DAY 4MONTH 5DAYOFWEEK</div>\n\t\t</div>\n\n\t\t<div class=\"help\"><a href=\"https://crontab.guru/examples.html\" target=\"_blank\" class=\"link\"><i class=\"ti ti-flask mr5\"></i>Examples</a></div>\n\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t<hr />\n\n\t\t<div class=\"grid-4\">\n\t\t\t<div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.offset\" config=\"type:number\" default=\"NOW.getTimezoneOffset()\">Time zone offset</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"help m\">Must be defined in minutes. The backend time is in UTC format.<br />Your current time zone offset is: <ui-bind path=\"NOW\" config=\"text:value.getTimezoneOffset()\" class=\"b\"></ui-bind> minutes</div>\n\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"ti ti-comment\"></i>Data sending</label>\n\t\t</div>\n\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,now|Current date and time,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"help\">Choose an output type</div>\n\n\t\t<ui-bind path=\"?.type\" config=\"show:value!=='now'\" class=\"block\">\n\t\t\t<div class=\"mt10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.random\" config=\"hide\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t</ui-bind>\n\t\t</ui-bind>\n\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer>Count of timers: <ui-bind path=\"CONFIG.timers\" config=\"text:value ? value.length : 0\" class=\"b\"></ui-bind></footer>\n</body>",
    "c30lh3cc16": "<script total>\n\n\texports.name = 'Map array';\n\texports.icon = 'ti ti-table';\n\texports.author = 'Total.js';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar arr, newarr = [];\n\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tarr = get(config.path);\n\t\t\t\t} catch(e) {}\n\t\t\t} else {\n\t\t\t\tarr = $.data;\n\t\t\t}\n\n\t\t\tif (!config.map)\n\t\t\t\treturn instance.throw('No configuration');\n\t\t\tif (!Array.isArray(arr))\n\t\t\t\treturn instance.throw('Input data is not an array');\n\n\t\t\tvar len = arr.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvar item = arr[i];\n\t\t\t\t\tif (typeof(item) !== 'object' || Array.isArray(item))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar val = getNewObj(arr[i], config.map);\n\t\t\t\t\tnewarr[i] = val;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data = newarr;\n\t\t\t$.send('output', );\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\n\t\t};\n\n\t\tinstance.configure();\n\t\t// from obj to result -> obj.name to result.name\n\t\tconst getNewObj = (obj, map) => {\n\t\t\tvar result = config.array ? [] : {};\n\t\t\tvar len = map.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvar paths = map[i]; // { source: 'path.to.value', target: 'new.path.to.value' }\n\t\t\t\tvar val = get(obj, paths.source);\n\n\t\t\t\tif (val) {\n\t\t\t\t\tif (config.array) {\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!paths.target)// no path, ignore it\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (paths.target === '...') // keep the same path\n\t\t\t\t\t\tpaths.target = paths.source;\n\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\telse\n\t\t\t\t\t\tset(result, paths.target, val);\n\t\t\t\t} else {\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n## The input must be an array of objects !!\n\nThis component can iterate over an array and only take properties listed in the configuration.\n### Example data:\n```js\n\t[\n\t\t{ sensor: { temperature: 25, humidity: 50, ... some more properties }},\n\t\t{ sensor: { temperature: 24, humidity: 55, ... some more properties }},\n\t\t{ sensor: { temperature: 23, humidity: 60, ... some more properties }}\n\t]\n```\n### Example configuration:\n`sensor.temperature` -> `temp`\n`sensor.humidity` -> `hum`\n\n### Example output:\n```js\n\t[\n\t\t{ temp: 25, hum: 50 },\n\t\t{ temp: 24, hum: 55 },\n\t\t{ temp: 23, hum: 60 }\n\t]\n```\n\nIf `Return an Array of Arrays` is checked then\neach of the Map properties will be pushed to a new array, see example bellow\n\n### Example given the data above and this configuration:\n`Return an Array of Arrays` -> **checked**\n**Map**\n`sensor.temperature`\n`sensor.humidity`\n\n### Example output:\n```js\n\t[\n\t\t[25, 50],\n\t\t[24, 55],\n\t\t[23, 60],\n\t]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.array\" config=\"type:checkbox\" class=\"m\">Return an Array of Arrays (Default: Array of Objects)</ui-component>\n\t\t<section class=\"maparray-section m\">\n\t\t\t<label>Map</label>\n\t\t\t<!--<ui-component name=\"keyvalue\" path=\"?.map\" config=\"placeholderkey:Type a path to property;placeholdervalue:Type a new path to a property\" class=\"maparray-keyvalue\"></ui-component>-->\n\n\t\t\t<div data-bind=\"?.map__template:.maparray-item -> data-index\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach item in value }}\n\t\t\t\t\t<div class=\"maparray-item\" data-index=\"{{ $index }}\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<ui-bind path=\"?.array\" config=\".col-md-11:value__.col-md-5:!value\" class=\"block\">\n\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.map[{{ $index }}].source\" class=\"m\"></ui-component>\n\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t<div class=\"col-md-1\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div class=\"m\" style=\"line-height: 35px;\">--&gt;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-5\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.map[{{ $index }}].target\"></ui-component>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"ti ti-trash red exec\" data-exec=\"FUNC.maparray_remove_item\" data-index=\"{{ $index }}\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.array\" config=\"hide\" class=\"help block m\">You can use 3 dots(...) in the right field to keep the same path.</ui-bind>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.maparray_add_item\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.maparray_readme\"><i class=\"ti ti-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.maparray_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.maparray_add_item = function(el) {\n\t\tconsole.log('ADDING', el);\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.map', { source: '', target: '' });\n\t};\n\n\tFUNC.maparray_remove_item = function(el) {\n\t\tconsole.log('REMOVING', el);\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.attrd('index');\n\t\tconfig.map.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.CLASS .button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.CLASS .button-add:hover { background-color: #F8F8F8; }\n\t.CLASS .button-add:active { background-color: #E0E0E0; }\n\n\t.CLASS .ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.CLASS .ui-dark .button-add:hover { background-color: #303030; }\n\t.CLASS .ui-dark .button-add:active { background-color: #404040; }\n\n\t.maparray-section > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n\t.maparray-section { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.maparray-keyvalue .ui-keyvalue-item-key { width: 50% !important; }\n\t.maparray-keyvalue .ui-keyvalue-item-value { margin: 0 32px 0 50% !important; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "c36eu373b4": "<script total>\n\n\texports.name = 'Transform';\n\texports.icon = 'ti ti-robot';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { path: '', assign: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'transform', name: 'Transform', type: 'transform' }, { id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar value = config.path ? U.get(data, config.path) : data;\n\t\t\tinstance.transform('transform', value, function(response) {\n\n\t\t\t\tif (config.assign)\n\t\t\t\t\tU.set(data, config.assign, response.data);\n\t\t\t\telse if (config.path)\n\t\t\t\t\tU.set(data, config.path, response.data);\n\t\t\t\telse\n\t\t\t\t\tdata = response.data;\n\n\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can transform message data.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.the.property\">Transform value according to this path</ui-component>\n\t\t\t\t<div class=\"help\">Only the value according to the path will be transformed</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.assign\" config=\"placeholder:path.to.the.property\">Assign response to the path</ui-component>\n\t\t\t\t<div class=\"help\">Empty path will replace transformed property</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px 8px; font-size: 11px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\tPath: <b><ui-bind path=\"CONFIG.path\" config=\"text;empty\"></ui-bind></b>\n\t</footer>\n</body>",
    "transformer": "<script total>\n\n\texports.id = 'transformer';\n\texports.name = 'Transformer';\n\texports.icon = 'ti ti-pulse';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { code: 'data.name = data.name.toUpperCase()', clear: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar repo = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar val = fn(data, repo, $.refs);\n\t\t\t\t\tif (val != null)\n\t\t\t\t\t\tdata = val;\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code)\n\t\t\t\t\tfn = new Function('data', 'repo', 'refs', config.code + ';return data;');\n\t\t\t\telse\n\t\t\t\t\tfn = null;\n\t\t\t\tif (config.clear)\n\t\t\t\t\trepo = {};\n\t\t\t} catch (e) {\n\t\t\t\tinstance.throw(e);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nWith this component you can easily modify incoming data. Then the `data` content is delivered.\n\n__Example 1__:\n\n```js\n// \"data\" is a reference to message data\ndata.name = data.name.toUpperCase();\n```\n\n__Example 2__:\n\n```js\ndata = data.toUpperCase();\n```\n\n__Example 3__:\n\n```js\nvar tmp = data;\ndata = {};\ndata.name = tmp.Name;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:85;tabs:true;trim:true\" class=\"m\"></ui-component>\n\t\t<ui-component name=\"input\" path=\"?.clear\" config=\"type:checkbox\">Clear repository object</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "request": "<script total>\n\n\texports.id = 'request';\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '6';\n\texports.icon = 'ti ti-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, secret: '', nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tvar secret = config.secret ? $.variables(config.secret, true) : null;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (secret && opt.body) {\n\t\t\t\topt.body = U.encrypt_data(opt.body, secret);\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers['X-Encryption'] = 'a';\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (secret && response.headers['x-encryption'])\n\t\t\t\t\tbody = U.decrypt_data(body, secret);\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 5px 10px 10px; }\n\t.CLASS .status span { padding: 1px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<ui-bind path=\"CONFIG\" config=\"template;show:value.url\" class=\"block status\">\n\t\t<script type=\"text/html\">\n\t\t\t<div class=\"monospace hellip\" title=\"{{ value.url }}\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t</script>\n\t</ui-bind>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1\"><b>URL address</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number\">Timeout</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-clock\"></i><ui-bind path=\"?.timeout\" config=\"text:((value||0)/1000).floor(2)+' sec.'\"></ui-bind><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number\">Max. size</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-calculator\"></i><ui-bind path=\"?.limit\" config=\"text:(value||0).filesize()\"></ui-bind><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.serialize\" config=\"dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</ui-component>\n\t\t<ui-component name=\"keyvalue\" path=\"?.headers\" config=\"placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</ui-component>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<ui-component name=\"keyvalue\" path=\"?.cookies\" config=\"placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</ui-component>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.parse\" config=\"type:checkbox\">Parse Response to Object</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.dnscache\" config=\"type:checkbox\">Enable DNS cache</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.insecure\" config=\"type:checkbox\">Allow insecure connection</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.xhr\" config=\"type:checkbox\">Add XHR header</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.secret\" config=\"camouflage:1;icon:ti ti-totaljs\">Total.js Encryption/Decryption secret</ui-component>\n\t</div>\n</settings>",
    "cron": "<script total>\n\n\texports.id = 'cron';\n\texports.name = 'Cron';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { jobs: [] };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['node-schedule'];\n\n\texports.make = function(instance, config) {\n\t\tvar schedule = require('node-schedule');\n\n\t\tvar startup = true;\n\t\tvar jobs = [];\n\n\t\tinstance.configure = function() {\n\t\t\tstartJobs(config.jobs);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tjobs.length && jobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t\tif (!job)\n\t\t\t\t\tconsole.log('no job', jobs);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction startJobs(newjobs) {\n\n\t\t\tjobs.forEach(function(job){\n\t\t\t\tjob && job.cancel();\n\t\t\t});\n\n\t\t\tjobs = [];\n\n\t\t\tnewjobs.forEach(function(job){\n\t\t\t\tjob = job.split('|').trim();\n\n\t\t\t\tif (job[0] === '@startup' && startup) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tinstance.send('output', job[1]);\n\t\t\t\t\t}, 5000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar j = schedule.scheduleJob(job[0], function(){\n\n\t\t\t\t\tvar value = job[1];\n\n\t\t\t\t\tif (job[1] === '@ts')\n\t\t\t\t\t\tvalue = Date.now();\n\n\t\t\t\t\tinstance.send('output', value);\n\t\t\t\t});\n\n\t\t\t\tjobs.push(j);\n\t\t\t});\n\n\t\t\tinstance.status(newjobs.length || '0');\n\n\t\t\tstartup = false;\n\t\t}\n\n\t};\n\n</script>\n\n<readme>\n[node-schedule](https://www.npmjs.com/package/node-schedule) on npmjs.com\n\nSyntax: `cron string | data (only string supported) | comment`\n\n## Cron string: `* * * * * *`\n\nMeaning of each `*` explained bellow, in order from left to right:\n\n- second (0 - 59, OPTIONAL)\n- minute (0 - 59)\n- hour (0 - 23)\n- day of month (1 - 31)\n- month (1 - 12)\n- day of week (0 - 7) (0 or 7 is Sun)\n\nor `@startup` to run once at the start or restart of an app (after 5 seconds)\n\n### Examples of cron string:\n\n```\n0 16 * * *      -> trigger every day at 16:00\n* 0 16 * * *    -> trigger at 16:00 every day and it will keep triggering every second until 16:01\n20,40 19 * * *  -> every day at 19:20 and 19:40\n*/5 * * * *     -> trigger every 5 seconds\n0 20 * * 1      -> every monday at 20:00\n@startup        -> runs once at startup\n```\n\n### Full example:\n\n```\n* 0 16 * * * | hello data | this is hello comment\n@startup | start\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"textboxlist\" path=\"?.jobs\" config=\"maxlength:50;placeholder:enter value like '* 1 * * * * | day' and hit enter\" class=\"m\">Cron jobs</ui-component>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.cron_readme\"><i class=\"ti ti-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.cron_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer ui-bind { float: right; font-weight: bold; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"!STATUS\" config=\"text\"></ui-bind>Number of jobs:</footer>\n</body>",
    "date": "<script total>\n\n\texports.id = 'date';\n\texports.name = 'Date';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-calendar';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Trigger' }];\n\texports.outputs = [{ id: 'output', name: 'Date/Time' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar makedate = function() {\n\t\t\tvar dt = new Date();\n\t\t\treturn config.format ? dt.format(config.format) : dt;\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', dt);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.send('output', makedate());\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component will return a Date/Time object (raw or formatted) according to its configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.format\" config=\"placeholder:yyyy-MM-dd HH\\:mm\\:ss\">Date format</ui-component>\n\t\t<div class=\"help\">Empty value will return current <code>datetime</code> object.</div>\n\t\t<hr />\n\t\t<p>\n\t\t\td - day e.g. 1<br>\n\t\t\tdd - day e.g. 01<br>\n\t\t\tddd - day (named). MO<br>\n\t\t\tdddd - day (named). Monday<br>\n\t\t\tM - month e.g. 1<br>\n\t\t\tMM - month e.g. 01<br>\n\t\t\tMMM - month (named). Jan<br>\n\t\t\tMMMM - month (named). January<br>\n\t\t\tyy - year e.g. 16<br>\n\t\t\tyyyy - year e.g. 2016<br>\n\t\t\tw - week number e.g. 1<br>\n\t\t\tww - week number e.g. 01<br>\n\t\t\tH - hour e.g. 1<br>\n\t\t\tHH - hour e.g. 01<br>\n\t\t\tm - minute e.g. 1<br>\n\t\t\tmm - minute e.g. 01<br>\n\t\t\ts - second e.g. 1<br>\n\t\t\tss - second e.g. 01<br>\n\t\t\ta - AM/PM\n\t\t</p>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer is=\"is-footer\" path=\"CONFIG.format\" config=\"text;show\"></footer>\n</body>",
    "c41u8b983b": "<script total>\n\n\texports.name = 'Downloader';\n\texports.icon = 'ti ti-download';\n\texports.group = 'Common';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tconst { unlink } = require('fs').promises;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tconst urlpath = config.urlpath || 'url';\n\n\t\t\tconst url = get(data, urlpath);\n\t\t\tif (!url)\n\t\t\t\treturn;\n\n\t\t\tconst filename = 'tmp/{0}.{1}'.format(UID(), U.getExtension(url));\n\n\t\t\tDOWNLOAD(data.url, filename, function(err, response){\n\t\t\t\tif (err) {\n\t\t\t\t\tinstance.throw(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst { filename, body, origin, status, headers } = response;\n\t\t\t\t$.send('output', { filename, body, origin, status, headers });\n\t\t\t\t$.on('terminate', () => {\n\t\t\t\t\tunlink(PATH.root(filename)).catch(e => console.log('[Downloader] Failed to unlink file: ' + filename  + ' | ' + e.message));\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\turl: 'https://example.com/file.jpg', // file url\n}\n```\n\n## Output\nA response object as returned by [DOWNLOAD()](https://docs.totaljs.com/total4/407ff001jy51c/#88aab001hd51c) function.\n```js\n{\n\tfilename: '/tmp/xyz.ext',\n\t...\n}\n```\nThe file will be automaticaly deleted once the message is destroyed.\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.urlpath\">Path to URL in the incomming object (default 'url')</ui-component>\n\t\t<div class=\"help m\">Supports dot notation like so: \"path.to.url\" or \"arr.0.url\" if the \"arr\" is an array. \"arr[0].url\" is not supported</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "localstorage": "<script total>\n\n\texports.id = 'localstorage';\n\texports.name = 'Local storage';\n\texports.icon = 'ti ti-hdd';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { savekey: 'id', readkey: 'id', path: '', remove: true, expire: '1 hour' };\n\texports.inputs = [{ id: 'save', name: 'Save' }, { id: 'read', name: 'Read' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar filename = PATH.databases('localstorage_' + instance.id + '.json');\n\t\tvar repo = {};\n\t\tvar timeout = null;\n\n\t\tvar saveforce = function() {\n\t\t\ttimeout = null;\n\t\t\tF.Fs.writeFile(filename, JSON.stringify(repo), NOOP);\n\t\t};\n\n\t\tvar save = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(saveforce, 500);\n\t\t};\n\n\t\tF.Fs.readFile(filename, 'utf8', function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar tmp = response.parseJSON(true);\n\t\t\t\tif (tmp)\n\t\t\t\t\trepo = tmp;\n\t\t\t}\n\t\t});\n\n\t\tinstance.destroy = function() {\n\t\t\tF.Fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message_save = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar key = config.savekey.indexOf('.') === -1 ? data[config.savekey] : U.get(data, config.savekey);\n\t\t\trepo[key] = { ts: NOW.add(config.expire), data: CLONE(data) };\n\t\t\t$.send('output', data);\n\t\t\tsave();\n\t\t};\n\n\t\tinstance.message_read = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar key = config.readkey.indexOf('.') === -1 ? data[config.readkey] : U.get(data, config.readkey);\n\t\t\tvar item = repo[key];\n\n\t\t\tif (item) {\n\n\t\t\t\tif (config.path) {\n\t\t\t\t\tif (config.path.indexOf('.') === -1)\n\t\t\t\t\t\tdata[config.path] = item.data;\n\t\t\t\t\telse\n\t\t\t\t\t\tU.set(data, config.path, item.data);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let key in item.data)\n\t\t\t\t\t\tdata[key] = item.data[key];\n\t\t\t\t}\n\n\t\t\t\tif (config.remove) {\n\t\t\t\t\tdelete repo[key];\n\t\t\t\t\tsave();\n\t\t\t\t}\n\n\t\t\t\t$.send('output', data);\n\n\t\t\t} else\n\t\t\t\t$.send('error', '404: ' + key);\n\t\t};\n\n\t\tinstance.service = function() {\n\n\t\t\tvar is = false;\n\t\t\tfor (var key in repo) {\n\t\t\t\tif (repo[key].ts < NOW) {\n\t\t\t\t\tdelete repo[key];\n\t\t\t\t\tis = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tis && save();\n\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nA small and simple persistent storage component is provided by this component. Data can be stored for a short period of time and read when needed.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\n\t\t<div class=\"caption m\">\n\t\t\t<label>Save input</label>\n\t\t</div>\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.savekey\" config=\"required:1;monospace:1\">Save key</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.expire\" config=\"required:1;monospace:1\">Expiration</ui-component>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"caption m\">\n\t\t\t<label>Read input</label>\n\t\t</div>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.readkey\" config=\"required:1;monospace:1\">Read key</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;placeholder:path.to.property\">Where to save data?</ui-component>\n\t\t\t\t<div class=\"help\">Otherwise the message will be extended.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.remove\" config=\"type:checkbox\">Remove the item after reading</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "c6bjf6e306": "<script total>\n\n\texports.name = 'NoSQL';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar collection = data.collection || config.collection;\n\t\t\tif (!collection)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No collection specified' });\n\n\t\t\tvar nosql = NOSQL(collection);\n\t\t\tvar method = data.method || config.method;\n\n\t\t\tif (!method)\n\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] No method specified' });\n\n\t\t\tif (method === 'insert') {\n\n\t\t\t\tif (typeof(data.data) === 'object') {\n\t\t\t\t\tconfig.addid && !data.data.id && (data.data.id = UID());\n\t\t\t\t\tnosql.insert(data.data).callback(function(err) {\n\t\t\t\t\t\t$.send('output', { success: err ? false : true, result: data.data });\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\t$.send('output', { success: false, error: 'invalid data' });\n\n\t\t\t} else if (method === 'read' || method === 'query') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tlet builder = nosql.find();\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tmethod === 'read' && builder.first();\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: response || [] });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'update') {\n\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tif (!filter)\n\t\t\t\t\treturn $.send('output', { success: false, err: '[NoSQL] Cannot update all the records, filter required' });\n\n\t\t\t\tlet upsert = data.upsert || config.upsert;\n\t\t\t\tlet addid = data.addid !== false && upsert && (data.addid || config.addid);\n\n\t\t\t\tif (addid && !data.data.id)\n\t\t\t\t\tdata.data.id = UID();\n\n\t\t\t\tlet builder = nosql.modify(data.data, upsert);\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\n\t\t\t} else if (method === 'remove') {\n\n\t\t\t\tlet builder = nosql.remove();\n\t\t\t\tlet filter = data.filter;\n\t\t\t\tapplyFilter(builder, filter);\n\t\t\t\tbuilder.callback(function(err, count) {\n\t\t\t\t\t$.send('output', { success: err ? false : true, result: count || 0 });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\t//instance.configure();\n\n\t\tfunction applyFilter(builder, filter) {\n\t\t\tfilter && filter instanceof Array && filter.forEach(function(q) {\n\t\t\t\tif (q instanceof Array) {\n\t\t\t\t\tvar m = q[0];\n\t\t\t\t\tvar args = q.splice(1);\n\t\t\t\t\tbuilder[m] && (builder[m].apply(builder, args));\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Outputs\n- response from nosql engine\n## Settings\n- collection: (optional) if not set, incomming data object must have a 'collection' property set\n- method: (optional) if not set, incomming data object must have a 'method' property set\n## Input\n```javascript\n{\n\tcollection: 'users', // optional, will override settings value\n\tmethod: 'query', // insert|read|query|update|remove - optional, will override settings value\n\t// for insert, update\n\tdata: { ... },\n\t// for query, read, update, remove\n\tfilter: [\n\t\t['where', 'sensor', 'temp'], // builder.where('sensor', 'temp');\n\t\t['limit', 2]                 // builder.limit(2);\n\t],\n\tupsert: true // only for update, if set then document will be inserted if it doesn't exist\n\taddid: true  // only for insert and update, if set then id prop will be automaticaly generated (for update only when upsert is also set)\n}\n```\n## Insert\n- inserts recieved data\n- expects data to be an Object\n- returns error, success, id\n## Read\n- returns first document found\n- requires `filter`\n- returns error, response\n## Update\n- updates document(s)\n- expects data to be an Object with all the props to be updated\n- requires `filter`\n- returns error, response\n- if response is 0 then update failed\n## Remove\n- removes document\n- requires `filter`\n- returns error, response\n- if response is 0 then remove failed\n## Query\n- returns all documents found\n- requires `filter`\n- returns error, response\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"textbox\" path=\"?.collection\" class=\"m\">DB collection(table) name</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:insert|Insert,update|Update,read|Read,query|Query,remove|Remove\" class=\"m\">Method</ui-component>\n\t\t<ui-bind path=\"?.method\" path=\"show:value === 'insert'\" class=\"block\">\n\t\t\t<ui-component name=\"checkbox\" path=\"?.addid\">Add unique ID to `id` property of data before insert</ui-component>\n\t\t</ui-bind>\n\t\t<ui-bind path=\"?.method\" config=\"show:value === 'update'\" class=\"block\">\n\t\t\t<ui-component name=\"checkbox\" path=\"?.upsert\">Insert document if it doesn't exist</ui-component>\n\t\t\t<ui-component name=\"checkbox\" path=\"?.upsertid\">Add unique ID to `id` property of data before insert (only if it doesn't exist)</ui-component>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "c6dqmb99db": "<script total>\n\n\texports.name = 'MongoDB Insert';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\n\t\tvar MONGO;\n        var COLS = {};\n\n\t\tinstance.message = async function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar result = {\n\t\t\t\tdata: data.data\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tif (data.data instanceof Array)\n\t\t\t\t\tresult.response = await COLS[id].insertMany(data.data, data.options);\n\t\t\t\telse\n\t\t\t\t\tresult.response = await COLS[id].insertOne(data.data, data.options);\n\n\t\t\t\tconsole.log('insertedId', typeof(result.response.insertedId))\n\t\t\t} catch(e) {\n\t\t\t\tresult = { error: e };\n\t\t\t}\n\n\t\t\t$.send('output', result);\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (config.string)\n\t\t\t\tconfig.connection = config.string;\n\n\t\t\tif (!config.connection)\n\t\t\t\treturn instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === config.connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[config.connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[config.connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tMONGO = REPO.mongodb[config.connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: { ... },  // data to insert, object for `insertOne` and an array of objects for `insertMany`\n\toptions: { ... }// insert options as passed to `insertOne(data, options)` or `insertMany(data, options)`\n}\n```\n\n</readme>\n<script>\n\tON('configure_mongodbinsert', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.string\" config=\"dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></ui-component>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\" class=\"m b\">Connection name</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" class=\"b\">Connection string (without the database name)</ui-component>\n\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.state\" config=\"text\"></ui-bind>\n\t</footer>\n</body>",
    "c6mtc1cf1a": "<script total>\n\n\texports.name = 'MongoDB Query';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Martin Smola';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb', 'mquery'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\t\tconst mquery = require('mquery');\n\n\t\tvar MONGO;\n\t\tvar COLS = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar query = mquery(COLS[id]);\n\t\t\tquery.$useProjection = true;\n\n\t\t\tconst builder = fn(query, data.data);\n\n\t\t\tbuilder.exec(function(err, data){\n\t\t\t\t$.send('output', { err, data });\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (!config.fn) {\n\t\t\t\tfn = null;\n\t\t\t\treturn instance.status({ state: 'Missing query function' });\n\t\t\t}\n\n\t\t\tvar connection = config.connection;\n\n\t\t\tfn = new Function('query', 'data', config.fn);\n\n\t\t\tif (config.string)\n\t\t\t\tconnection = config.string;\n\n\t\t\tif (!connection)\n\t\t\t\treturn  instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tconfig.string = connection;\n\n\t\t\tMONGO = REPO.mongodb[connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\t\t};\n\t};\n\n</script>\n\n<readme>\nUses mquery under the hood. Here is the [documentation](https://www.npmjs.com/package/mquery)\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: <any> // this prop will be passed into the query function\n}\n```\n\n## Query editor\n```js\n// query; mquery instance\n// data; data from the incomming object\n\nquery.find(); // return all documents\n```\n\n## Important\nIn the `.select()` you cannot use inclusion and exclusion together.\nThis is invalid: `.select('firstname -lastname')`\nValid exclusion: `.select('-lastname')` or `.select('-email -lastname')` etc.\nValid inclusion: `.select('name email')` or `.select('email lastname')` etc.\n</readme>\n<script>\n\tON('configure_mongodbquery', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.string\" config=\"dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></ui-component>\n\t\t\t\t<hr />\n\t\t\t\t<ui-bind path=\"?.string\" config=\"config [data---]:'required:' + (!value);hide\">\n\t\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Connection name</ui-component>\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1\">Connection string (without the database name)</ui-component>\n\t\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t\t</ui-bind>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"codemirror\" path=\"?.fn\" config=\"type:javascript;required:true;height:300\" class=\"m\">Query editor</ui-component>\n\t\t\t\t<a href=\"https://www.npmjs.com/package/mquery\" target=\"_blank\"><i class=\"ti ti-info-circle mr5\"></i>mquery documentation</a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.state\" config=\"text\"></ui-bind>\n\t</footer>\n</body>",
    "c6otuf066b": "<script total>\n\n\texports.name = 'MySQL';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mysql2'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst mysql = require('mysql2');\n\n\t\tvar MYSQL;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MYSQL || !MYSQL.pool)\n\t\t\t\treturn $.send('output', { error: 'MySQL connection not configured' });\n\n\t\t\tMYSQL.pool.query(data.query, function(err, rows, fields) {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\n\t\t\t\t$.send('output', { rows });\n\t\t\t})\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MYSQL) {\n\t\t\t\tMYSQL.count--;\n\t\t\t\tif (MYSQL.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tMYSQL.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tMYSQL = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (MYSQL && MYSQL.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tMYSQL = exports.POOLS[config.connection];\n\t\t\t\tMYSQL.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = mysql.createPool(config.connection);\n\t\t\tMYSQL = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMySQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">e.g.: mysql://user:password@localhost:3306/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text\" class=\"red\"></ui-bind>\n\t</footer>\n</body>",
    "c6vbdf73fe": "<script total>\n\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'ti ti-recycle';\n\texports.author = 'Total.js';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></ui-component>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"required:1;type:number;min:100;align:1;ricon:!ms\" default=\"1000\">Interval</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.parser\" config=\"dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1\" default=\"'json'\" class=\"m\">Parser</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"ti ti-calendar mr5\"></i><ui-bind path=\"STATUS.used\" config=\"text;format:yyyy-MM-dd HH:mm:ss;empty\"></ui-bind></div>\n\t\t<div><i class=\"ti ti-calculator mr5\"></i><ui-bind path=\"STATUS.size\" config=\"text;helper:filesize;empty\"></ui-bind></div>\n\t\t<hr />\n\t\t<ui-bind path=\"CONFIG.path\" config=\"text;empty\" class=\"block\"></ui-bind>\n\t</footer>\n</body>",
    "c6w2xf656f": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'ti ti-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.path\" config=\"required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></ui-component>\n\t\t<div class=\"help m\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<ui-component name=\"input\" path=\"?.serializer\" config=\"dirsource:json|JSON,text|Text,buffer|Buffer;required:1\" default=\"'json'\" class=\"m\">Serializer</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\" default=\"true\">Rewrite content</ui-component>\n\t\t<ui-bind path=\"?.rewrite\" config=\"hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.divider\">Divider</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"ti ti-calendar mr5\"></i><ui-bind path=\"STATUS.used\" config=\"text;format:yyyy-MM-dd HH:mm:ss;empty\"></span></ui-bind></div>\n\t\t<div><i class=\"ti ti-calculator mr5\"></i><ui-bind path=\"STATUS.size\" config=\"text;helper:filesize;empty\"></span></ui-bind></div>\n\t\t<hr />\n\t\t<ui-bind path=\"CONFIG.path\" config=\"text;empty\"></ui-bind>\n\t</footer>\n</body>",
    "qrcode": "<script total>\n\n\texports.id = 'qrcode';\n\texports.name = 'QR Code';\n\texports.icon = 'ti ti-qrcode-alt';\n\texports.author = 'Peter Širka / Total.js';\n\texports.version = '1';\n\texports.group = 'Generators';\n\texports.config = { small: false, width: 200, height: 200, margin: 4 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.npm = ['qrcode'];\n\n\texports.make = function(instance, config) {\n\n\t\tconst QRCode = require('qrcode')\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar text = typeof(data) === 'string' ? data : data.text;\n\t\t\tQRCode.toDataURL(text, config, function(err, url) {\n\t\t\t\tif (err) {\n\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof(data) === 'string')\n\t\t\t\t\t\tdata = { text: data };\n\t\t\t\t\tdata.data = url;\n\t\t\t\t\t$.send('output', data);\n\t\t\t\t}\n\t\t\t})\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component generates QR Code.\n\n__Input data__:\n\n```js\n{\n\ttext: String\n}\n```\n\n__Output data__:\n\n```js\n{\n\ttext: String,\n\tdata: 'Data URL - BASE64'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "rabbitmqconnection": "<script total>\n\n\texports.id = 'rabbitmqconnection';\n\texports.name = 'RabbitMQ Connection';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'ti ti-envelope';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [];\n\texports.flags = ['rabbitmq'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\t\tvar Manager;\n\t\tvar states = { connected: 'Connected', disconnected: 'Disconnected', connecting: 'Connecting ...', connectionfailed: 'Connection failed' };\n\n\t\tinstance.state = { id: 'disconnected', title: states.disconnected };\n\t\tvar setState = (state) => {\n\t\t\tinstance.state = { id: state, title: states[state] };\n\n\t\t\tinstance.status(states[state], 1000);\n\t\t\tnotifyDeps(state, states[state]);\n\t\t};\n\n\t\tvar notifyDeps = (type) => {\n\t\t\tvar instances = instance.main.instances().filter(i => i.module.flags && i.module.flags.includes('rabbitmq-dep') > -1 && i.config.manager === instance.id);\n\t\t\tfor (let com of instances)\n\t\t\t\tcom.configure(type);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.close(true);\n\n\t\t\tif (!config.hostname) // queue name is optional in some cases, not supported here\n\t\t\t\treturn instance.status('Not configured');\n\n\t\t\tsetState('connecting');\n\t\t\tinstance.status(states.connecting);\n\n\t\t\tconfig.port = config.port || 5672;\n\t\t\tconfig.vhost = config.vhost || '/';\n\t\t\tif (config.vhost[0] !== '/')\n\t\t\t\tconfig.vhost = '/' + config.vhost;\n\n\t\t\tvar credentials = '';\n\t\t\tif (config.username)\n\t\t\t\tcredentials += config.username;\n\t\t\tif (config.password)\n\t\t\t\tcredentials += ':' + config.password;\n\t\t\tif (credentials)\n\t\t\t\tcredentials += '@';\n\n\t\t\tvar conString = `${config.protocol}://${credentials}${config.hostname}:${config.port}${config.vhost}`;\n\n\t\t\t// Create a new connection manager\n\t\t\tManager = amqp.connect([conString]);\n\t\t\tManager.on('connect', function(){\n\t\t\t\tinstance.Manager = Manager;\n\t\t\t\tsetState('connected');\n\t\t\t});\n\n\t\t\tManager.on('connectFailed', function(){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('connectionfailed');\n\t\t\t\t// notifyDeps('connectfailed'); // this does not happen after connect so the deps should be disconnected\n\t\t\t});\n\n\t\t\tManager.on('disconnect', function(e){\n\t\t\t\tinstance.Manager = null;\n\t\t\t\tsetState('disconnected');\n\t\t\t});\n\n\t\t\tManager.on('error', function(e){\n\t\t\t\tconsole.log('Rabbit Error', e);\n\t\t\t\tif (!Manager.isConnected()) {\n\t\t\t\t\tsetState('disconnected');\n\t\t\t\t\tinstance.Manager = null;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(silent) {\n\t\t\tManager && Manager.close();\n\t\t\tinstance.Manager = null;\n\t\t\t!silent && notifyDeps('removed');\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.hostname\" config=\"placeholder:localhost;required:1\" class=\"m\">Hostname or IP address</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.port\" config=\"type:number;placeholder:5672\" default=\"5672\" class=\"m\">Port (default: 5672)</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.protocol\" config=\"dirsource:amqp|amqp,amqps|amqps\" default=\"'amqp'\" class=\"m\">Protocol</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.vhost\" config=\"placeholder:/\" class=\"m\">Virtual host</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.username\" class=\"m\">Username</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.password\" config=\"type:password\" class=\"m\">Password</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"!STATUS\" config=\"show;text\"></ui-bind></footer>\n</body>",
    "rabbitmqconsume": "<script total>\n\n\texports.id = 'rabbitmqconsume';\n\texports.name = 'RabbitMQ Consume';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'ti ti-envelope';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar channel, Manager, ManagerState;\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tinstance.status('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tinstance.status('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinstance.status(ManagerState.title, 1000);\n\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel instance.\n\t\t\t\t\tvar qname = instance.replace(config.queuename);\n\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\tchan.assertQueue(qname, { consumerTag: 'consumer-' + qname }),\n\t\t\t\t\t\tchan.consume(qname, function(msg) {\n\t\t\t\t\t\t\tif (msg !== null) {\n\t\t\t\t\t\t\t\tvar data = {\n\t\t\t\t\t\t\t\t\tqueuename: qname,\n\t\t\t\t\t\t\t\t\tpayload: msg.content.toString(),\n\t\t\t\t\t\t\t\t\tmsg: { fields: msg.fields }\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tinstance.send('output', data);\n\t\t\t\t\t\t\t\tchan.ack(msg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t]);\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tconsole.log(config.manager, man);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.manager\" config=\"dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.queuename\" config=\"required:1\" class=\"m\">Queue name</ui-component>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\tON('configure_rabbitmqconsume', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"!STATUS\" config=\"text\"></ui-bind></footer>\n</body>",
    "rabbitmqpublish": "<script total>\n\n\texports.id = 'rabbitmqpublish';\n\texports.name = 'RabbitMQ Publish';\n\texports.group = 'RabbitMQ';\n\texports.icon = 'ti ti-envelope';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.flags = ['rabbitmq-dep'];\n\n\texports.npm = ['amqp-connection-manager'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar amqp = require('amqp-connection-manager');\n\n\t\tvar Manager, channel, ManagerState;\n\t\tvar stats = { ack: 0, nack: 0 };\n\n\t\t// initialy the stack is paused\n\t\tvar stack = new Stack(instance.id, function(data, next){\n\t\t\tif (!channel) {\n\t\t\t\treturn next(false);\n\t\t\t}\n\n\t\t\tchannel\n\t\t\t\t.sendToQueue(config.queuename, Buffer.from(data))\n\t\t\t\t.then(function () {\n\t\t\t\t\tnext(true);\n\t\t\t\t\tif (stats.ack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.ack = 0;\n\t\t\t\t\tstats.ack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tnext(false);\n\t\t\t\t\tif (stats.nack === Number.MAX_SAFE_INTEGER)\n\t\t\t\t\t\tstats.nack = 0;\n\t\t\t\t\tstats.nack++;\n\t\t\t\t\tsetStatus();\n\t\t\t\t});\n\t\t});\n\n\t\tinstance.message = function($) {\n\t\t\tvar d = $.data;\n\t\t\tvar type = typeof(d);\n\t\t\tif (type !== 'buffer' && type !== 'string')\n\t\t\t\td = JSON.stringify(d);\n\n\t\t\tstack.push(d);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tfunction setStatus(str, timeout) {\n\t\t\tinstance.status({\n\t\t\t\tstate: str || ManagerState.title,\n\t\t\t\tstats\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function(state, statetitle) {\n\t\t\tsetStatus('Reconfiguring..');\n\t\t\tstatetitle && instance.status(statetitle, 1000);\n\n\t\t\tif (state === 'disconnected') {\n\t\t\t\tchannel && channel.close && channel.close();\n\t\t\t\tsetStatus('Disconnected', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tManager = getManager();\n\t\t\tif (!Manager) {\n\t\t\t\tsetStatus('No connection', 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetStatus(ManagerState.title, 1000);\n\n\t\t\tchannel && channel.close && channel.close();\n\t\t\t// no state or state === 'connect'\n\t\t\tchannel = createChannel();\n\t\t};\n\n\t\tvar createChannel = () => {\n\t\t\t// Ask the connection manager for a ChannelWrapper.  Specify a setup function to\n\t\t\t// run every time we reconnect to the broker.\n\t\t\treturn Manager.createChannel({\n\t\t\t\tsetup: function (chan) {\n\t\t\t\t\t// `channel` here is a regular amqplib `ConfirmChannel`.\n\t\t\t\t\t// Note that `this` here is the channel wrapper instance.\n\t\t\t\t\tsetTimeout(_ => { stack && stack.next(); }, 1000);\n\t\t\t\t\treturn chan.assertQueue(config.queuename, { durable: true });\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function(){\n\t\t\tstack.destroy();\n\t\t\tstack = null;\n\t\t\tchannel && channel.close && channel.close();\n\t\t};\n\n\t\tvar getManager = () => {\n\t\t\tvar man = instance.main.find(config.manager);\n\t\t\tif (man && man.Manager) {\n\t\t\t\tManagerState = man.state;\n\t\t\t\treturn man.Manager;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tfunction Stack(id, callback) {\n\t\t\tvar self = this;\n\t\t\tself.dbname = 'amqp_stack_' + id;\n\t\t\tself.index = 0;\n\t\t\tself.callback = callback;\n\t\t\tself.busy = false;\n\t\t\tself.db = NOSQL(self.dbname);\n\t\t\t//NOSQLMEMORY(self.dbname);\n\t\t};\n\n\t\tStack.prototype.destroy = function() {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.busy = true;\n\t\t\tthis.callback = () => {};\n\t\t\tthis.data = null;\n\t\t};\n\n\t\tStack.prototype.next = function() {\n\t\t\tvar self = this;\n\t\t\tif (self.busy)\n\t\t\t\treturn;\n\t\t\tself.busy = true;\n\t\t\tif (self.timeout) {\n\t\t\t\tclearTimeout(self.timeout);\n\t\t\t\tself.timeout = null;\n\t\t\t}\n\n\t\t\tself.db.find().first().callback(function(err, data){\n\t\t\t\tif (data) {\n\t\t\t\t\tvar id = data.id;\n\t\t\t\t\tvar data = data.data;\n\t\t\t\t\tself.callback(data, function(ok){\n\t\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t\tself.db.remove().where('id', id).callback(function(){\n\t\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.busy = false;\n\t\t\t\t\t\t\tself.timeout = setTimeout(function(){\n\t\t\t\t\t\t\t\tself.next();\n\t\t\t\t\t\t\t}, 3000);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\tself.busy = false;\n\t\t\t});\n\t\t};\n\n\t\tStack.prototype.push = function(data) {\n\t\t\tthis.db.insert({ id: this.index++, data: data }).callback((err, result, meta) => {\n\t\t\t\tthis.next();\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('rabbitmq'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.config.username ? com.config.username + '@' : ''}${com.config.hostname}:${com.config.port}${com.config.vhost}` });\n\n\t\tanswer(arr);\n\t};\n\n</script>\n\n<readme>\nUses [amqp-connection-manager](https://github.com/jwalton/node-amqp-connection-manager)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.manager\" config=\"dirsource:%rabbitmqs;dirraw:1;placeholder:Select RabbitMQ connection;dirempty:No connection;required:1\" class=\"m\"><b>RabbitMQ Connetion</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.queuename\" config=\"required:1\" class=\"m\">Queue name</ui-component>\n\t\t\t\t<div class=\"help m\">Supports variables: queue-{queueid} , the {queueid} will be overwritten by the value from variables</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS footer ui-bind { float: right; }\n</style>\n\n<script>\n\tON('configure_rabbitmqpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%rabbitmqs', response);\n\t\t}, true);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS.state\" config=\"text\" class=\"block\"></ui-bind>\n\t\t<div>Ack: <ui-bind path=\"STATUS.stats.ack__text\"></ui-bind></div>\n\t\t<div>Nack: <ui-bind path=\"STATUS.stats.nack__text\"></ui-bind></div>\n\t</footer>\n</body>",
    "c86gkd02da": "<script total>\n\n\texports.name = 'Workflow';\n\texports.group = 'REST API';\n\texports.version = '3';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Name', code: 'success();', clear: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1400 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar repo = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn($, repo);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\t$.throw(e);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.send('error', 'Not configured');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tvar code = config.code;\n\t\t\t\tif (code) {\n\n\t\t\t\t\tvar builder = ['var controller=$.refs.controller||EMPTYOBJECT'];\n\n\t\t\t\t\tif (code.indexOf('headers') !== -1)\n\t\t\t\t\t\tbuilder.push('headers=controller.headers||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('params') !== -1)\n\t\t\t\t\t\tbuilder.push('params=controller.params||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('query') !== -1)\n\t\t\t\t\t\tbuilder.push('query=controller.query||EMPTYOBJECT');\n\n\t\t\t\t\tif (code.indexOf('variable(') !== -1)\n\t\t\t\t\t\tbuilder.push('variable=key=>$.main.variables[key]||$.main.variables2[key]');\n\n\t\t\t\t\tif (code.indexOf('respond(') !== -1)\n\t\t\t\t\t\tbuilder.push('respond=(data)=>$.send(\\'output\\',data)');\n\n\t\t\t\t\tif (code.indexOf('success(') !== -1)\n\t\t\t\t\t\tbuilder.push('success=(data)=>$.send(\\'output\\',{success:true,value:data})');\n\n\t\t\t\t\tif (code.indexOf('cancel(') !== -1)\n\t\t\t\t\t\tbuilder.push('cancel=()=>$.end()');\n\n\t\t\t\t\tif (code.indexOf('send(') !== -1)\n\t\t\t\t\t\tbuilder.push('send=(data)=>$.instance.send(\\'output\\', data)');\n\n\t\t\t\t\tif (code.indexOf('done(') !== -1)\n\t\t\t\t\t\tbuilder.push('done=function(is){return function(err,response){if(err){$.send(\\'error\\',[{error:err.toString()}])}else{$.send(\\'output\\',{success:true,value:is==true?response:is})}}}');\n\n\t\t\t\t\tbuilder.push('invalid=$.invalid=(err)=>$.send(\\'error\\',[{error:err.toString()}])');\n\n\t\t\t\t\tif (code.indexOf('user') !== -1)\n\t\t\t\t\t\tbuilder.push('user=controller.user');\n\n\t\t\t\t\tif (code.indexOf('ip') !== -1)\n\t\t\t\t\t\tbuilder.push('ip=controller.ip||\\'\\'');\n\n\t\t\t\t\tif (code.indexOf('model') !== -1)\n\t\t\t\t\t\tbuilder.push('model=$.data');\n\n\t\t\t\t\tvar AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t\t\t\t\tvar body = builder.join(',') + ';try{\\n' + code + '\\n}catch(e){$.instance.status({error:e.message});$.destroy();}';\n\n\t\t\t\t\tfn = code.indexOf('await ') === -1 ? new Function('$', 'repo', body) : new AsyncFunction('$', 'repo', body);\n\n\t\t\t\t\tif (config.clear)\n\t\t\t\t\t\trepo = {};\n\n\t\t\t\t} else\n\t\t\t\t\tfn = null;\n\n\t\t\t\tinstance.status(EMPTYOBJECT);\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.status({ error: e.message });\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t\trepo = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component simulates Total.js Schema Workflow operation. It can process data and store/read them into the database.\n\n__Properties__:\n- `$ {Message}`\n- `controller {Object}` A controller instance\n- `user {Object}` A user instance if exists\n- `headers {Object}` Request headers\n- `query {Object}` URL query arguments\n- `params {Object}` A dynamic URL params\n- `ip {String}` IP address\n- __`repo {Object}`__ a custom persistent repository object\n- __`model {Object}`__ an alias to `$.data`\n\n__Model/Data__:\n\n- `$.data {Object}` a message data\n- `$.repo {Object}` a message repository\n- `$.refs {Object}` a message references\n\n__Functions__:\n- `variable(key {String}) returns {String}` for reading variables\n- `cancel()` Cancels the processing without error and sending data next\n- `respond(data {Object})` Responds with data\n- `success(data {Object} optional)` Response with success object\n- `invalid(error {String})` Error handling`\n- `done(respond_value {Boolean/Object} optional)` return `function(err, response)` for handling callbacks\n\t- when it `fails` it calls `invalid()`\n\t- when it `done` it calls `success()`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Workflow name</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.clear\" config=\"type:checkbox\" class=\"m b\">Clear repository object</ui-component>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:175;tabs:true;trim:true\"></ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: \n\t\t<b><ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind></b>\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text span;show\" style=\"padding:10px\" class=\"fs12 red block\">\n\t\t\t<i class=\"ti ti-bug mr5\"></i><b>ERROR:</b> <span></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "chatgpt": "<script total>\n\n\texports.id = 'chatgpt';\n\texports.name = 'ChatGPT';\n\texports.icon = 'ti ti-robot-alt';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.group = 'Services';\n\texports.config = { model: 'text-davinci-003', apikey: '' };\n\texports.inputs = [{ id: 'input', name: 'Question' }];\n\texports.outputs = [{ id: 'output', name: 'Answer' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function (instance, config) {\n\n\t\tconst URL = 'https://api.openai.com/v1/completions';\n\n\t\tvar model;\n\t\tvar cfg;\n\n\t\tinstance.message = async function ($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data) {\n\t\t\t\t$.send('error', 'Input text is missing');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (cfg.model) {\n\t\t\t\tcase 'text-curie-001':\n\t\t\t\tcase 'text-davinci-003':\n\t\t\t\tcase 'text-babbage-001':\n\t\t\t\tcase 'text-ada-001':\n\t\t\t\t\tRESTBuilder.POST(URL, { model: cfg.model, prompt: data, temperature: 0, max_tokens: 220 }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response.choices) {\n\t\t\t\t\t\t\tvar text = response.choices[0].text;\n\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpt-3.5-turbo':\n\n\t\t\t\t\tvar messages = $.data.messages || $.data;\n\n\t\t\t\t\tif (!(messages instanceof Array)) {\n\t\t\t\t\t\t$.send('error', 'Error: Input must be array of messages');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!messages[0] || !messages[0].role) {\n\t\t\t\t\t\t$.send('error', 'Error: Each message object must have message role attribute : user or assistant or system');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tvar url = 'https://api.openai.com/v1/chat/completions';\n\t\t\t\t\tRESTBuilder.POST(url, { model: cfg.model, messages: messages }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response.choices) {\n\t\t\t\t\t\t\tvar text = response.choices[0].message.content;\n\n\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'whisper-1':\n\t\t\t\t\tvar path = $.data.path || $.data;\n\n\t\t\t\t\tvar url = 'https://api.openai.com/v1/audio/transcriptions';\n\t\t\t\t\tRESTBuilder.POST(url, { model: cfg.model }).header('Authorization', 'Bearer ' + cfg.apikey).file('file', path).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response)\n\t\t\t\t\t\t\t$.send('output', response);\n\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak\n\n\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function () {\n\t\t\tcfg = instance.replace(config);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n</script>\n\n<readme>\n\tThis component can talk to ChatGPT.\n\topenai\n\n\t# input\n\n\tInput will depend on selected model\n\n\t- __CPT 3.5 Turbo__\n\t```js\n\n\t// Object\n\t{\n\tmessages : [{ role: 'user', content: 'Text' }]\n\t}\n\n\t// or\n\n\n\t// Array\n\t[{ role: 'assistant', content: 'Text' }]\n\t```\n\n\t- __Whisper__\n\t```js\n\n\t// Object\n\t{\n\tpath : 'path-to-file'\n\t}\n\n\t// or\n\n\n\t// String\n\t'path-to-file'\n\t```\n\n\t- __Other__\n\t```js\n\n\t// Object\n\t{\n\ttext : 'your question'\n\t}\n\n\t// or\n\n\n\t// String\n\t'your question'\n\t```\n\n\n\t# output\n\n\tOutput also depends on selected model\n\t- __CPT 3.5 Turbo__\n\t```js\n\t'Response from assistant'\n\t```\n\n\t- __Whisper__\n\t```js\n\n\t// Object\n\t{\n\ttext : 'transcipted text'\n\t}\n\t```\n\t- __Other__\n\t```js\n\n\t// String\n\t'your question'\n\t```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.apikey\" config=\"camouflage:1;required:1\">API key</ui-component>\n\t\t<div class=\"help m\"><a href=\"https://platform.openai.com/account/api-keys\" target=\"_blank\"><i class=\"ti ti-external\"></i>Generate API key</a></div>\n\t\t<ui-component name=\"input\" path=\"?.model\"\n\t\t\tconfig=\"type:select;dirsource:gpt-3.5-turbo|GPT 3.5 Turbo,Whisper|whisper-1,text-davinci-003|Davinci,text-curie-001|Curie,text-babbage-001|Babbage,text-ada-001|ADA\">Model</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "c8fhicfd7b": "<script total>\n\n\texports.name = 'Duration';\n\texports.group = 'Stats';\n\texports.version = '1';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar stats = {};\n\n\t\tstats.min = null;\n\t\tstats.max = null;\n\t\tstats.avg = 0;\n\t\tstats.last = 0;\n\t\tstats.count = 0;\n\n\t\tinstance.trigger = function() {\n\t\t\tstats.min = null;\n\t\t\tstats.avg = 0;\n\t\t\tstats.max = null;\n\t\t\tstats.last = null;\n\t\t\tstats.count = 0;\n\t\t\tinstance.status(stats);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar duration = ((Date.now() - $.duration) / 1000).floor(3);\n\n\t\t\tif (stats.min === null || stats.min > duration)\n\t\t\t\tstats.min = duration;\n\n\t\t\tif (stats.max === null || stats.max < duration)\n\t\t\t\tstats.max = duration;\n\n\t\t\tstats.avg = ((stats.max + stats.min) / 2).floor(3);\n\t\t\tstats.last = duration;\n\t\t\tstats.count++;\n\n\t\t\tinstance.status(stats, 500);\n\t\t\t$.send('output', stats);\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component counts message duration. All values except `count` are defined in seconds.\n\n__Output__:\n\n```js\n{\n\tmin: Number,\n\tmax: Number,\n\tavg: Number,\n\tlast: Number,\n\tcount: Number\n}\n```\n</readme>\n\n<style>\n\t.CLASS .keyvalue > span { width: 60px; }\n\t.CLASS .keyvalue > div { margin-left: 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer style=\"padding:10px;width:180px\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<ui-bind path=\"STATUS\" config=\"template;.keyvalue\" class=\"mt10\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Min</span>\n\t\t\t\t\t<div class=\"right\">{{ value.min | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Max</span>\n\t\t\t\t\t<div class=\"right\">{{ value.max | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Avg</span>\n\t\t\t\t\t<div class=\"right\">{{ value.avg | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Last</span>\n\t\t\t\t\t<div class=\"right\">{{ value.last | format(3) | empty }} sec.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Count</span>\n\t\t\t\t\t<div class=\"right b\">{{ value.count | format(0) | empty }}</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
    "c96afb26ca": "<script total>\n\n\texports.name = 'Tangular';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Templates';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar template;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\ttry {\n\t\t\t\t$.data = template(data, $);\n\t\t\t} catch(e) { $.data = ''; }\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttemplate = Tangular.compile(config.template || '');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nUses server-side implementation of [Tangular](https://docs.totaljs.com/components/40d06002lm50c/)\n**Example:**\nIncomming data\n```js\n{\n\tapp_name: 'Total.js Flow'\n}\n```\nTemplate\n```\nApp name: {{ app_name }}\n```\n\n$ --> {MessageInstance} https://docs.totaljs.com/total4/40844001ni51c/\nIn the example bellow, the $.refs.controller is only available if the message was created by the Route component\n```\nURL: {{ $.refs.controller.url }}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Template:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.template\" config=\"type:html;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></ui-component>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<script>\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "c98yp2ff01": "<script total>\n\n\texports.name = 'RSS reader';\n\texports.group = 'Transformations';\n\texports.version = '1';\n\texports.icon = 'ti ti-rss-square';\n\texports.author = 'Total.js';\n\texports.config = { url: '', type: 'a' };\n\texports.inputs = [{ id: 'input', name: 'Trigger' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\n\t\tvar cache = [];\n\t\tvar cachelimit = 50;\n\n\t\tinstance.close = function() {\n\t\t\tcache = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tif (!config.url)\n\t\t\t\treturn;\n\n\t\t\tvar opt = {};\n\t\t\topt.method = 'GET';\n\t\t\topt.custom = true;\n\t\t\topt.url = config.url;\n\n\t\t\tvar output = config.type === 'a' || config.type === 'b' ? [] : null;\n\n\t\t\tREQUEST(opt, function(err, response) {\n\t\t\t\tresponse.stream.on('data', U.streamer('<item>', '</item>', function(xml) {\n\t\t\t\t\tvar item = xml.parseXML(true);\n\t\t\t\t\tif (item) {\n\n\t\t\t\t\t\tvar obj = {};\n\t\t\t\t\t\tobj.title = item.item_title;\n\t\t\t\t\t\tobj.id = obj.title.makeid();\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'd') {\n\t\t\t\t\t\t\tif (cache.indexOf(obj.id) !== -1)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\tif (cache.unshift(obj.id) > cachelimit)\n\t\t\t\t\t\t\t\tcache.pop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj.description = item.item_description;\n\t\t\t\t\t\tobj.link = item.item_link;\n\n\t\t\t\t\t\tif (item.item_image_url)\n\t\t\t\t\t\t\tobj.image = item.item_image_url;\n\t\t\t\t\t\telse if (item['item_enclosure__'])\n\t\t\t\t\t\t\tobj.image = item['item_enclosure__'].url;\n\n\t\t\t\t\t\tvar date = item.item_pubDate || item.item_pubdate;\n\t\t\t\t\t\tif (date)\n\t\t\t\t\t\t\tobj.date = new Date(date);\n\n\t\t\t\t\t\tif (config.type === 'b' || config.type === 'c')\n\t\t\t\t\t\t\tinstance.newmessage().send('output', obj);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\toutput.push(obj);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tresponse.stream.on('end', function() {\n\t\t\t\t\toutput && output.length && instance.newmessage().send('output', output);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t\tinstance.trigger();\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS footer { padding: 5px 10px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.url\" config=\"type:url;required:1\">URL address</ui-component>\n\t\t<div class=\"help m\">Example: <code>https://blog.totaljs.com/rss/</code></div>\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:a|Send all items,b|Send only new items,c|Send every item separately,d|Send only new items separately\">Output</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThe component downloads every item from the RSS source. A message on to this `Trigger` input starts downloading RSS data.\n\n__Example__:\n```js\n{\n\ttitle: String,\n\tdescription: String,\n\tlink: String,\n\timage: String, // optional\n\tdate: Date // optional\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Download</button>\n\t</div>\n\t<footer is=\"is-footer\" path=\"CONFIG.url\" config=\"text;show\"></footer>\n</body>",
    "cmyhl6414e": "<script total>\n\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-list';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (arr instanceof Array) {\n\t\t\t\t\tif (queue.length)\n\t\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\t\telse\n\t\t\t\t\t\tqueue = arr;\n\t\t\t\t}\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b><ui-bind path=\"STATUS.pending\" config=\"text:value?value.format(0):'0'\"></ui-bind></b></div>\n\t</footer>\n</body>",
    "modify": "<script total>\n\texports.id = 'modify';\n\texports.name = 'Modify';\n\texports.icon = 'ti ti-cog';\n\texports.group = 'Common';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tfor (let i = 0; i < Rules.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { getValue, setValue } = Rules[i];\n\n\t\t\t\t\tvar data = getValue($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\t\t\t\t\tsetValue(data, $, instance, set);\n\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.rules || !config.rules.length)\n\t\t\t\treturn;\n\n\t\t\tconst rules = config.rules;\n\t\t\tRules = [];\n\n\t\t\trules.forEach(function eachCondition(cond, index){\n\n\t\t\t\tconst { rule, source, sourcepath, target, targetpath } = cond;\n\t\t\t\tvar getValue, setValue;\n\n\t\t\t\tif (rule === 'remove') {\n\n\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t\tif (!targetpath) {\n\t\t\t\t\t\tif (is$) // set $.data or $.repo to null\n\t\t\t\t\t\t\tsetValue = (d, $) => { $[target] = null; };\n\t\t\t\t\t\telse // ignore variables or variables2\n\t\t\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', 'set({0}, {1}, null);'.format(base, sourcepath));\n\t\t\t\t\t}\n\n\t\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rule === 'set' || rule === 'move') {\n\n\t\t\t\t\tif (source === 'expression')\n\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', sourcepath.indexOf('return') > -1 ? sourcepath : 'return ' + sourcepath + ';');\n\t\t\t\t\telse if (source === 'string')\n\t\t\t\t\t\tgetValue = () => sourcepath; // sourcepath is the actual string value\n\t\t\t\t\telse if (source === 'number') {\n\t\t\t\t\t\tgetValue = () => Number(sourcepath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar str = 'if ({0}) return {1}; if (typeof {1} !== \\'object\\' || {1} == null) return; return {2};'.format(sourcepath ? 'false' : 'true', source, sourcepath ? 'get({0}, \\'{1}\\')'.format(source, sourcepath) : sourcepath);\n\t\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\t\t\tconsole.error(str);\n\t\t\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar str;\n\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t// targetpath => data | repo | variables | variables2\n\t\t\t\tif (!targetpath)\n\t\t\t\t\tstr = base + ' = data;';\n\t\t\t\telse\n\t\t\t\t\tstr = 'if (typeof {0} !== \\'object\\' || {0} == null) {0} = {1}; set({0}, \\'{2}\\', data);'.format(base, isNaN(targetpath[0]) ? '{}' : '[]', targetpath);\n\n\t\t\t\tif (rule === 'move' && sourcepath) {\n\t\t\t\t\tvar is$2 = source === 'data' || source === 'repo';\n\t\t\t\t\tvar base2 = (is$2 ? '$.' : 'instance.main.') + source;\n\t\t\t\t\t// don't delete source if the target is within the same path: source $.data.device --> target $.data.device.data\n\t\t\t\t\tif (base !== base2 || !targetpath.startsWith(sourcepath))\n\t\t\t\t\t\tstr += ' set({0}, \\'{1}\\', null);'.format(base2, sourcepath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t};\n\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t});\n\t\t};\n\n\t\ttry {\n\t\t\tinstance.configure();\n\t\t} catch (e) { console.error(e);}\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tThis component allows you to set/modify/move/remove properties of the incomming data.\n\tFor eaxample, to set the message data to a string `Hello world` select *Message data* in the rule dropdown and leave the text field empty.\n\tThen in the bellow dropdown select `string` and enter the desired string in the text field.\n\tResult:\n\t- before: $.data -> 'Hello world'\n\t- after:  $.data -> 'New string'\n\n\t## Expression\n\tAvailable params are: `data`, `repo`, `variables` ,`variables2`\n\tWhere data is message.data, repo is message.repo --> [Documentation](https://docs.totaljs.com/total4/40844001ni51c)\n\tAnd variables are local variables which can be set in the Variables dialog accessible on the main toolbar(the button between Plus icon and Bug icon)\n\tFor example, we want message data to be the value of (data.value + variables.offset)\n\tResult:\n\t- before: $.data --> `{ value: 100 }` / variables --> `{ offset: 20, ... many other properties }`\n\t- after:  $.data -> `{ value: 120 }`\n\tThe expression: `data.value + variables.offset`\n\n\t### Important\n\t- `Remove` -> `Message data / Message repo` -> `<empty path>` will set `Message data / Message repo` to `null`;\n\t- `Remove` -> `Local variables / Global variables` -> `<empty path>` will be ignored but `Remove` -> `Local variables / Global variables` -> `myVar` will work.\n\t- `Set` -> `Message data` -> `some.path` to: `Message data` -> `some.other.path` will add another property to the incoming data and rest of the data will remain untouched\n\t- `Set` -> `Message data` -> `<empty path>` to: `Message data` -> `some.path` will essentialy overwrite the incomming data, after this there's no longer access to original data(same goes for repo)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<section class=\"modify-rules m\">\n\t\t\t<label>Rules</label>\n\t\t\t<ui-bind path=\"?.rules\" config=\"template:.modify-rule -> data-index\" class=\"block\"> \n\t\t\t\t<ui-component name=\"movable\" path=\"?.rules\" config=\"selector:.dragme;exec:FUNC.modify_rule_dragged\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach rule in value }}\n\t\t\t\t\t\t<div class=\"modify-rule dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.rules[{{ $index }}].rule\" config=\"dirsource:REPO.modify_rules\" class=\"m\"></ui-component>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t<div class=\"m\">--&gt;</div>\n\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.rules[{{ $index }}].rule\" config=\"hide:value == 'remove'\" class=\"block\">to:</ui-bind>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-7\">\n\t\t\t\t\t\t\t\t\t<div class=\"modify-input-group m\">\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.rules[{{ $index }}].target\" config=\"dirsource:REPO.modify_targets\"></ui-component>\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.rules[{{ $index }}].targetpath\" config=\"placeholder:value\"></ui-component>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.rules[{{ $index }}].rule\" config=\"hide:value == 'remove'\" class=\"modify-input-group block\">\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.rules[{{ $index }}].source\" config=\"dirsource:REPO.modify_sources\"></ui-component>\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.rules[{{ $index }}].sourcepath\" config=\"placeholder:value\"></ui-component>\n\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t<i class=\"ti ti-trash red exec\" data-exec=\"FUNC.modify_remove_rule\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help m\">Each rule will be applied in the order from top to bottom.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.modify_add_rule\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.modify_readme\"><i class=\"ti ti-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.modify_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.modify_add_rule = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.rules', { rule: 'set', source: '', sourcetype: '', target: '', targettype: '' });\n\t};\n\n\tFUNC.modify_remove_rule = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.modify_rule').attrd('index');\n\t\tconfig.rules.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_rule_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.rules.splice(dragged_index, 1)[0];\n\t\tconfig.rules.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.modify_sources = 'string|String,number|Number,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_targets = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_rules = 'set|Set,remove|Remove,move|Move'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.modify-input-group { clear: both; height: 36px; }\n\t.modify-input-group > ui-component:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.modify-input-group > ui-component:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.modify-input-group.wide > ui-component:first-child .ui-input-control { width: 200px; }\n\t.modify-input-group.wide > ui-component:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.modify-rules { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.modify-rule { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.modify-rule > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.modify-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.modify-thead { padding: 8px; margin-bottom:4px; }\n\t.modify-rules > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "json_schema_validator": "<script total>\n\texports.id = 'json_schema_validator';\n\texports.name = 'JSON Schema validator';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }, { id: 'schema', name: 'Schema' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'schema', name: 'Schema' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar schema;\n\n\t\tinstance.message = function($) {\n\t\t\tif (!schema) {\n\t\t\t\t$.send('error', { error: 'Not ready' });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ($.input === 'schema') {\n\t\t\t\t$.send('schema', { schema });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\t\t\tJSONSCHEMA(schema, data, function(error, response){\n\t\t\t\tif (error)\n\t\t\t\t\t$.send('error', { msg: 'Invalid data', error });\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t\tschema = config.schema && config.schema.parseJSON();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nJSON schema [documentation](https://json-schema.org/learn/getting-started-step-by-step.html)\n## Inputs\n\t- input -> validate data and send the result to output if no error, otherwise send error to error output\n\t- schema -> read the schema and send it to the schema output\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.schema\" config=\"type:javascript;required:true;height:500\">JSON schema</ui-component>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "middleware_exec": "<script total>\n\texports.id = 'middleware_exec';\n\texports.name = 'Middleware Exec';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Martin Smola';\n\texports.config = { id: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function message($) {\n\t\t\tif (!config.id) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar com = instance.main.instances().findItem('id', config.id);\n\n\t\t\tif (!com || !com.execute) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcom.execute($, function(err, data){\n\t\t\t\tif (err)\n\t\t\t\t\t$.send('error', err);\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\t};\n\n\texports.call = function call(data, callback) {\n\t\tvar coms = this.instances().filter(ins => ins.component === 'middleware_function' && ins.config.name).map(ins => ({ id: ins.id, name: ins.config.name }));\n\t\tcallback(coms);\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\t\texports.settings = function(meta) {\n\t\t\tmeta.call(function(response) {\n\t\t\t\tSET('%functions', response);\n\t\t\t}, true);\n\t\t};\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.id\" config=\"dirsource:%functions;dirraw:1;placeholder:Select middleware function;dirempty:No functions;required:1\" class=\"m\">Name</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "cnjn484cfe": "<script total>\n\n\texports.name = 'Server extension';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-check-square';\n\texports.author = 'Total.js';\n\texports.config = { name: 'My extension', install: '', uninstall: '', icon: exports.icon };\n\n\texports.make = function(instance, config) {\n\n\t\tvar install = null;\n\t\tvar uninstall = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (uninstall) {\n\t\t\t\tuninstall.call(instance, instance, require);\n\t\t\t\tuninstall = null;\n\t\t\t\tsetTimeout(instance.configure, 1000);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tinstall = config.install ? new Function('instance', 'require', config.install) : null;\n\t\t\t\tuninstall = config.uninstall ? new Function('instance', 'require', config.uninstall) : null;\n\t\t\t} catch (e) {\n\t\t\t\tinstall = null;\n\t\t\t\tuninstall = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\n\t\t\tinstall && install.call(instance, instance, require);\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tuninstall && uninstall.call(instance, instance, require);\n\t\t\tuninstall = null;\n\t\t\tinstall = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component installs Total.js server-side extension. In other words: it can evaluate JavaScript code when the component is initialized or the component settings is changed.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;placeholder:e.g. Database\">Name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.icon\" config=\"type:icon\">Icon</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Installation code:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.install\" config=\"type:javascript;height:300;tabs:true;trim:true\"></ui-component>\n\t\t<div class=\"help m\">The code will be executed when the configuration is changed or the component instance is initialized.</div>\n\t\t<div class=\"ui-input-label\">Uninstallation code:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.uninstall\" config=\"type:javascript;height:300;tabs:true;trim:true\"></ui-component>\n\t\t<div class=\"help\">The code above will be executed when the configuration is changed or the component instance is removed.</div>\n\t</div>\n</settings>\n\n<body>\n\t<ui-bind path=\"CONFIG\" config=\"template\" class=\"padding center block\">\n\t\t<script type=\"text/html\">\n\t\t\t<i class=\"ti-2x {{ value.icon }}\"></i>\n\t\t\t<div class=\"mt10 fs12\">{{ value.name }}</div>\n\t\t\t<div class=\"help npt nmt\">Server extension</div>\n\t\t</script>\n\t</ui-bind>\n</body>",
    "qrgenerator": "<script total>\n\n\texports.id = 'qrgenerator';\n\texports.name = 'QR generator';\n\texports.icon = 'ti ti-qrcode';\n\texports.group = 'Common';\n\texports.author = 'Total Avengers';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['awesome-qr'];\n\n\texports.make = function(instance, config) {\n\n\t\tconst { AwesomeQR } = require(\"awesome-qr\");\n\t\tconst { writeFile, readFile } = require('fs').promises;\n\t\tconst filename = PATH.tmp(instance.id + 'qrcode.png');\n\t\tvar bgready = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tgenerate(data.text, function(err, buf){\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.end();\n\t\t\t\tif ($.data.filename)\n\t\t\t\t\tF.Fs.writeFile($.data.filename, buf, function(err){\n\t\t\t\t\t\tif (err) instance.throw(err);\n\t\t\t\t\t});\n\t\t\t\t$.data._qrcode = buf.toString('base64');\n\t\t\t\t$.send('output');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t/*// \"config\" is changed\n\t\t\tif (config.background) {\n\t\t\t\twriteFile(filename, Buffer.from(config.background.split(';base64,')[1], 'base64'))\n\t\t\t\t\t.then(_ => { console.log('OK'); bgready = true; })\n\t\t\t\t\t.catch(err => { console.log('FAILED', err); bgready = false; });\n\t\t\t} else\n\t\t\t\tbgready = false;*/\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function generate(text, cb) {\n\t\t\tvar bg;\n\n\t\t\tif (bgready) {\n\t\t\t\ttry {\n\t\t\t\t\tbg = await readFile(filename);\n\t\t\t\t} catch(e) {\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar obj = {\n\t\t\t\ttext,\n\t\t\t\tsize: 600\n\t\t\t}\n\n\t\t\tif (bg)\n\t\t\t\tobj.backgroundImage = bg;\n\t\t\tvar buffer;\n\n\t\t\tnew AwesomeQR(obj).draw().then(buf => {\n\t\t\t\tcb(null, buf);\n\t\t\t}).catch(err => {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\n```js\n{\n\ttext: 'text to write to qr code',\n\tfilename: '/public/img/', // optionaly writes the file to filesystem\n\t...\n}\n```\n## Output\n```js\n{\n\ttext: 'text to write to qr code',\n\t...\n\t_qrcode: 'base64 encoded buffer'\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
    "cogwj7a56b": "<script total>\n\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-circle-alt';\n\texports.color = '#E73323';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true, watch: [] };\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar filter = null;\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.logger && instance.logger(function($) {\n\n\t\t\tif (filter && !filter[$.fromid])\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\toutput && instance.status({ name: $.from.module.name, date: NOW, data: JSON.stringify(output, serializer) });\n\t\t});\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.watch && config.watch.length) {\n\t\t\t\tfilter = {};\n\t\t\t\tfor (var id of config.watch)\n\t\t\t\t\tfilter[id] = 1;\n\t\t\t} else\n\t\t\t\tfilter = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tif (!instance.logger)\n\t\t\tinstance.throw('You need to update Total.js framework');\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS { border-color: #E73323 !important; }\n\t.CLASS .area { background: #FEE7E7; }\n\t.CLASS header i { animation: 1s blink infinite alternate forwards; border-radius: 100px; }\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n\t.ui-dark .CLASS .area { background: #7e4d4d; }\n\t.ui-dark .CLASS pre, .ui-dark .debugform pre { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"%debugsearch\" config=\"type:search;placeholder:Search components\" class=\"m\">Search</ui-component>\n\t\t<ui-component name=\"search\" path=\"%debugsearch\" config=\"selector:figure\">\n\t\t\t<ui-component name=\"selection\" path=\"?.watch\" config=\"datasource:flow.instances;click:figure\">\n\t\t\t\t<ui-bind path=\"flow.instances\" config=\"template\" class=\"block listing2 small\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t\t<figure data-search=\"{{ m.id }} {{ m.Component.name }}{{ if m.note }} {{ m.note }}{{ fi }}\">\n\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t<span class=\"selection\" data-id=\"{{ m.id }}\"><i class=\"ti ti-eye\"></i></span>{{ m.Component.name }}{{ if m.note }}<span class=\"gray ml10\">{{ m.note }}</span>{{ fi }}\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-bind>\n\t\t\t</ui-component>\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ti ti-bull\" style=\"background:#E73323;color:#FFF\"></i><b>NAME</b>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"ti ti-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<ui-component name=\"box\" path=\"common.$debug\" config=\"if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:ti ti-bug;zindex:5;$id:debugwindowbox\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"ti ti-remove red\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></ui-component>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.close = function() {\n\t\t\tNUL('common.$debug');\n\t\t\tdelete W.debugwindow;\n\t\t\tdelete W.debugwindowclear;\n\t\t\tSETTER('#debugwindowbox/remove');\n\t\t};\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"ti ti-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(JSON.parse(data.data), '\\t'))));\n\t\t};\n\n\t});\n\n</script>",
    "cpdmad79c5": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'ti ti-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data, null, null, $.refs.reference);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\"><b>Output name</b></ui-component>\n\t\t<ui-component name=\"textarea\" path=\"?.readme\" config=\"monospace:1;height:250\">Readme</ui-component>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component can send data from an encapsulated FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Output: <ui-bind path=\"CONFIG.name\" config=\"text;empty\" class=\"b\"></ui-bind>\n\t</header>\n</body>",
    "cpjxle8886": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '4';\n\texports.icon = 'ti ti-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid, msg.refs.reference);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.id\" config=\"dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></ui-component>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <ui-bind path=\"STATUS.name\" config=\"text;empty\" class=\"b monospace\"></ui-bind>\n\t</header>\n</body>",
    "cposua7079": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'ti ti-wifi';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data, reference) {\n\t\t\tvar msg = instance.newmessage(data);\n\t\t\tmsg.refs.reference = reference;\n\t\t\tmsg.send('data');\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\"><b>Input name</b></ui-component>\n\t\t<ui-component name=\"input\" path=\"?.readme\" config=\"monospace:1;type:multiline;height:250\">Readme</ui-component>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data in an encapsulated FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <ui-bind path=\"CONFIG.name\" config=\"text;empty\" class=\"b\"></ui-bind>\n\t</header>\n</body>",
    "cpzj1fd204": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '3';\n\texports.icon = 'ti ti-wifi';\n\texports.author = 'Total.js';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data, reference) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid) {\n\t\t\t\tvar msg = instance.newmessage(data);\n\t\t\t\tmsg.refs.reference = reference;\n\t\t\t\tmsg.send('data');\n\t\t\t}\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.id\" config=\"dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></ui-component>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <ui-bind path=\"STATUS.name\" config=\"text;empty\" class=\"b monospace\"></ui-bind>\n\t</header>\n</body>",
    "c6dnjccf0e": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'ti ti-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"mt10 m\">\n\t\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t</div>\n\t\t<ui-bind path=\"?.random\" config=\"hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
    "c6jjm6e7f": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
    "consolelog": "<script total>\n\n\texports.id = 'consolelog';\n\texports.name = 'console.log()';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tconsole.log($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component prints a message into the console.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
  },
  "design": {
    "ilnatcz0j": {
      "id": "ilnatcz0j",
      "config": {
        "url": "/admin-list",
        "method": "GET",
        "timeout": 5000,
        "limit": 5120,
        "upload": false,
        "send": "all"
      },
      "x": 51.94444274902344,
      "y": 66.95312881469727,
      "component": "cw8ey8a628",
      "connections": {
        "output": [
          {
            "id": "ilnaukveh",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "ti ti-map-pin",
        "group": "REST API",
        "name": "Route",
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "ilnatdi1b": {
      "id": "ilnatdi1b",
      "config": {
        "type": "json",
        "code": 200
      },
      "x": 1280.9375305175781,
      "y": 69.95660018920898,
      "component": "cw73ld8c35",
      "connections": {},
      "template": {
        "icon": "ti ti-share",
        "group": "REST API",
        "name": "Response",
        "inputs": [
          {
            "id": "input",
            "name": "Response"
          }
        ]
      }
    },
    "ilnatm6wn": {
      "id": "ilnatm6wn",
      "config": {
        "connection": "postgresql://postgres:postgres@postgres/total"
      },
      "x": 454.9566345214844,
      "y": 167.96007919311523,
      "component": "cv1yv14fb3",
      "connections": {
        "output": [
          {
            "id": "ilnc7i21u",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "ti ti-database",
        "group": "Databases",
        "name": "PostgreSQL",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "ilnau8xlx": {
      "id": "ilnau8xlx",
      "config": {
        "random": false,
        "type": "object",
        "data": "{\n\tquery: 'SELECT * FROM admins;'\n}",
        "restart": true
      },
      "x": 51.96180725097656,
      "y": 184.95660018920898,
      "component": "c6dnjccf0e",
      "connections": {
        "output": [
          {
            "id": "ilnaukveh",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "ti ti-bullhorn",
        "group": "Triggers",
        "name": "Trigger",
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "ilnaukveh": {
      "id": "ilnaukveh",
      "config": {
        "template": "{\n\tquery: 'SELECT * FROM admins;'\n}"
      },
      "x": 264.9653015136719,
      "y": 144.95660018920898,
      "component": "object",
      "connections": {
        "output": [
          {
            "id": "ilnatm6wn",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "ti ti-list-alt",
        "group": "Data",
        "name": "Object",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "ilnc75jru": {
      "id": "ilnc75jru",
      "config": {
        "name": "AdminModel",
        "path": "",
        "schema": [
          {
            "id": "qqk2q9lo",
            "label": "Name",
            "name": "id",
            "type": "number",
            "required": false,
            "array": false
          },
          {
            "id": "tp6pe4da",
            "label": "Name",
            "name": "first_name",
            "type": "string",
            "required": false,
            "array": false
          },
          {
            "id": "9vrlkinkw",
            "label": "Name",
            "name": "surname",
            "type": "string",
            "required": false,
            "array": false
          },
          {
            "id": "89l7wbpsp",
            "label": "Name",
            "name": "contact_number",
            "type": "string",
            "required": false,
            "array": false
          },
          {
            "id": "a22a4ll6",
            "label": "Name",
            "name": "email",
            "type": "email",
            "required": false,
            "array": false
          },
          {
            "id": "servzeezv",
            "label": "Name",
            "name": "is_active",
            "type": "boolean",
            "required": false,
            "array": false,
            "default": "true"
          },
          {
            "id": "39hu4ivad",
            "label": "Name",
            "name": "is_block",
            "type": "boolean",
            "required": false,
            "array": false,
            "default": "false"
          },
          {
            "id": "g633o2ghi",
            "label": "Name",
            "name": "is_archive",
            "type": "boolean",
            "required": false,
            "array": false,
            "default": "false"
          },
          {
            "id": "pdjhu3mrn",
            "label": "Name",
            "name": "is_superuser",
            "type": "boolean",
            "required": false,
            "array": false,
            "default": "false"
          },
          {
            "id": "kwws19gmk",
            "label": "Name",
            "name": "roles",
            "type": "number",
            "required": false,
            "array": true
          },
          {
            "id": "0sme61km6",
            "label": "Name",
            "name": "created_at",
            "type": "date",
            "required": false,
            "array": false
          },
          {
            "id": "k1tiwaywe",
            "label": "Name",
            "name": "updated_at",
            "type": "date",
            "required": false,
            "array": false
          },
          {
            "id": "hlh15hi3",
            "label": "Name",
            "name": "archived_at",
            "type": "date",
            "required": false,
            "array": false
          },
          {
            "id": "h9cydzzx3",
            "label": "Name",
            "name": "last_login_at",
            "type": "date",
            "required": false,
            "array": false
          }
        ],
        "rewrite": true
      },
      "x": 77.96875,
      "y": 496.9791831970215,
      "component": "cwmlm413ef",
      "connections": {},
      "template": {
        "icon": "ti ti-file",
        "group": "Transformations",
        "name": "Model",
        "inputs": [
          {
            "id": "input",
            "name": "Data"
          },
          {
            "id": "partial",
            "name": "Partial data"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          },
          {
            "id": "error",
            "name": "Error"
          }
        ]
      }
    },
    "ilnc7a3eb": {
      "id": "ilnc7a3eb",
      "config": {
        "type": "json",
        "code": 500
      },
      "x": 1278.9410705566406,
      "y": 147.95139694213867,
      "component": "cw73ld8c35",
      "connections": {},
      "template": {
        "icon": "ti ti-share",
        "group": "REST API",
        "name": "Response",
        "inputs": [
          {
            "id": "input",
            "name": "Response"
          }
        ]
      }
    },
    "ilnc7fq2v": {
      "id": "ilnc7fq2v",
      "config": {
        "repo": false,
        "data": true
      },
      "x": 938.9497375488281,
      "y": 318.9323081970215,
      "component": "c6jjm6e7f",
      "connections": {},
      "template": {
        "icon": "ti ti-print",
        "group": "Common",
        "name": "Print",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ]
      }
    },
    "ilnc7i21u": {
      "id": "ilnc7i21u",
      "config": {
        "code": "data.result = data.rows\ndelete data.rows",
        "clear": false
      },
      "x": 646.9618225097656,
      "y": 190.95487594604492,
      "component": "transformer",
      "connections": {
        "output": [
          {
            "id": "ilnc7fq2v",
            "index": "input"
          },
          {
            "id": "ilndfk33t",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "ti ti-pulse",
        "group": "Common",
        "name": "Transformer",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "ilndfk33t": {
      "id": "ilndfk33t",
      "config": {
        "name": "ResultModel",
        "path": "",
        "schema": [
          {
            "id": "rucmarhd",
            "label": "Name",
            "name": "result",
            "type": "ilnc75jru",
            "required": false,
            "array": true
          }
        ],
        "rewrite": true
      },
      "x": 938.9584045410156,
      "y": 103.97570419311523,
      "component": "cwmlm413ef",
      "connections": {
        "error": [
          {
            "id": "ilnc7a3eb",
            "index": "input"
          },
          {
            "id": "ilndflunu",
            "index": "input"
          }
        ],
        "output": [
          {
            "id": "ilnatdi1b",
            "index": "input"
          },
          {
            "id": "ilndflunu",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "ti ti-file",
        "group": "Transformations",
        "name": "Model",
        "inputs": [
          {
            "id": "input",
            "name": "Data"
          },
          {
            "id": "partial",
            "name": "Partial data"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          },
          {
            "id": "error",
            "name": "Error"
          }
        ]
      }
    },
    "ilndflunu": {
      "id": "ilndflunu",
      "config": {
        "repo": false,
        "data": true
      },
      "x": 1276.9184875488281,
      "y": 227.92535018920898,
      "component": "c6jjm6e7f",
      "connections": {},
      "template": {
        "icon": "ti ti-print",
        "group": "Common",
        "name": "Print",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ]
      }
    },
    "groups": [
      {
        "id": "glndfzltf",
        "x": 32.96875,
        "y": 15.954862117767334,
        "width": 1504.27666,
        "height": 668.28966,
        "name": "Admin List",
        "background": "rgba(209,229,253,0.3)",
        "color": "#0216C4"
      }
    ]
  },
  "variables": {},
  "sources": {},
  "proxypath": "/users/",
  "dtcreated": "2023-10-05T17:00:18.946Z"
}
